(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{TkZL:function(t,v,l){l.d(v,"a",function(){return E});var e=l("mrSG"),d=l("ADVu"),r=l("Xeau");v=l("Qdxt");var h=l("/eyM"),w=l("afLn"),q=l("O+1A"),n=l("y4Ty"),x=l("tVVT");t=l("WHS4");var m=l("Z6Y1");l("BKDp");l("DgfZ");l("96d9");l("+eXD");l("bP33");l("R409");l("J/yG");l("JrGt");l("HOTX");l("mKn1");l("0UiN");l("ABA8");m.a.ShadersStore.cellPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\n\nvec3 computeCustomDiffuseLighting(lightingInfo info,vec3 diffuseBase,float shadow)\n{\ndiffuseBase=info.diffuse*shadow;\n#ifdef CELLBASIC\nfloat level=1.0;\nif (info.ndl<0.5)\nlevel=0.5;\ndiffuseBase.rgb*vec3(level,level,level);\n#else\nfloat ToonThresholds[4];\nToonThresholds[0]=0.95;\nToonThresholds[1]=0.5;\nToonThresholds[2]=0.2;\nToonThresholds[3]=0.03;\nfloat ToonBrightnessLevels[5];\nToonBrightnessLevels[0]=1.0;\nToonBrightnessLevels[1]=0.8;\nToonBrightnessLevels[2]=0.6;\nToonBrightnessLevels[3]=0.35;\nToonBrightnessLevels[4]=0.2;\nif (info.ndl>ToonThresholds[0])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[0];\n}\nelse if (info.ndl>ToonThresholds[1])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[1];\n}\nelse if (info.ndl>ToonThresholds[2])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[2];\n}\nelse if (info.ndl>ToonThresholds[3])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[3];\n}\nelse\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[4];\n}\n#endif\nreturn max(diffuseBase,vec3(0.2));\n}\nvoid main(void)\n{\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nlightingInfo info;\nvec3 diffuseBase=vec3(0.,0.,0.);\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}";
l("1+8w");l("saFL");l("v8D3");l("yBFv");l("5MrA");l("suwV");l("jPqA");l("cEDN");l("jQhv");m.a.ShadersStore.cellVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var y=l("UpSL"),I=function(d){function b(){var a=d.call(this)||this;a.DIFFUSE=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.POINTSIZE=!1;a.FOG=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.NDOTL=!0;a.CUSTOMUSERLIGHTING=!0;a.CELLBASIC=!0;a.DEPTHPREPASS=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a),p=function(k){function b(a,
b){a=k.call(this,a,b)||this;a.diffuseColor=new r.a(1,1,1);a._computeHighLevel=!1;a._disableLighting=!1;a._maxSimultaneousLights=4;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,g){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new I);var c=b._materialDefines,
f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var d=f.getEngine();if(c._areTexturesDirty&&(c._needUVs=!1,f.texturesEnabled&&this._diffuseTexture&&q.a.DiffuseTextureEnabled))if(this._diffuseTexture.isReady())c._needUVs=!0,c.DIFFUSE=!0;else return!1;c.CELLBASIC=!this.computeHighLevel;h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);c._needNormals=h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);h.a.PrepareDefinesForFrameBoundValues(f,
d,c,g?!0:!1);h.a.PrepareDefinesForAttributes(a,c,!0,!0);if(c.isDirty){c.markAsProcessed();f.resetCachedMaterial();g=new y.a;c.FOG&&g.addFallback(1,"FOG");h.a.HandleFallbacksForShadows(c,g,this.maxSimultaneousLights);0<c.NUM_BONE_INFLUENCERS&&g.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;var e=[n.b.PositionKind];c.NORMAL&&e.push(n.b.NormalKind);c.UV1&&e.push(n.b.UVKind);c.UV2&&e.push(n.b.UV2Kind);c.VERTEXCOLOR&&e.push(n.b.ColorKind);h.a.PrepareAttributesForBones(e,
a,c,g);h.a.PrepareAttributesForInstances(e,c);a=c.toString();var k="world view viewProjection vEyePosition vLightsType vDiffuseColor vFogInfos vFogColor pointSize vDiffuseInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 diffuseMatrix".split(" "),F=["diffuseSampler"],l=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:l,samplers:F,defines:c,maxSimultaneousLights:this.maxSimultaneousLights});b.setEffect(f.getEngine().createEffect("cell",{attributes:e,
uniformsNames:k,uniformBuffersNames:l,samplers:F,defines:a,fallbacks:g,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this.maxSimultaneousLights-1}},d),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,g){var c=this.getScene(),f=g._materialDefines;f&&(g=g.effect)&&(this._activeEffect=g,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",
c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._mustRebind(c,g)&&(this._diffuseTexture&&q.a.DiffuseTextureEnabled&&(this._activeEffect.setTexture("diffuseSampler",this._diffuseTexture),this._activeEffect.setFloat2("vDiffuseInfos",this._diffuseTexture.coordinatesIndex,this._diffuseTexture.level),this._activeEffect.setMatrix("diffuseMatrix",this._diffuseTexture.getTextureMatrix())),h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",
this.pointSize),h.a.BindEyePosition(g,c)),this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*b.visibility),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,f,this._maxSimultaneousLights),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=function(){var a=[];this._diffuseTexture&&
this._diffuseTexture.animations&&0<this._diffuseTexture.animations.length&&a.push(this._diffuseTexture);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._diffuseTexture&&a.push(this._diffuseTexture);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)?!0:this._diffuseTexture===a};b.prototype.dispose=function(a){this._diffuseTexture&&this._diffuseTexture.dispose();k.prototype.dispose.call(this,a)};b.prototype.getClassName=
function(){return"CellMaterial"};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.CellMaterial";return a};b.Parse=function(a,f,g){return d.a.Parse(function(){return new b(a.name,f)},a,f,g)};Object(e.b)([Object(d.m)("diffuseTexture")],b.prototype,"_diffuseTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture",
void 0);Object(e.b)([Object(d.e)("diffuse")],b.prototype,"diffuseColor",void 0);Object(e.b)([Object(d.c)("computeHighLevel")],b.prototype,"_computeHighLevel",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"computeHighLevel",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,
"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.CellMaterial"]=p;p=l("kdvT");(function(){return function(){}})();var J=function(){return function(){}}();p=function(d){function b(a,b){a=d.call(this,a,b)||this;a.CustomParts=new J;a.customShaderNameResolve=a.Builder;a.FragmentShader=m.a.ShadersStore.defaultPixelShader;a.VertexShader=m.a.ShadersStore.defaultVertexShader;
return a}Object(e.c)(b,d);b.prototype.AttachAfterBind=function(a,b){if(this._newUniformInstances)for(var f in this._newUniformInstances)a=f.toString().split("-"),"vec2"==a[0]?b.setVector2(a[1],this._newUniformInstances[f]):"vec3"==a[0]?b.setVector3(a[1],this._newUniformInstances[f]):"vec4"==a[0]?b.setVector4(a[1],this._newUniformInstances[f]):"mat4"==a[0]?b.setMatrix(a[1],this._newUniformInstances[f]):"float"==a[0]&&b.setFloat(a[1],this._newUniformInstances[f]);if(this._newSamplerInstances)for(f in this._newSamplerInstances)a=
f.toString().split("-"),"sampler2D"==a[0]&&this._newSamplerInstances[f].isReady&&this._newSamplerInstances[f].isReady()&&b.setTexture(a[1],this._newSamplerInstances[f])};b.prototype.ReviewUniform=function(a,b){if("uniform"==a&&this._newUniforms)for(var f=0;f<this._newUniforms.length;f++)-1==this._customUniform[f].indexOf("sampler")&&b.push(this._newUniforms[f]);if("sampler"==a&&this._newUniforms)for(f=0;f<this._newUniforms.length;f++)-1!=this._customUniform[f].indexOf("sampler")&&b.push(this._newUniforms[f]);
return b};b.prototype.Builder=function(a,f,g,c,d,e){var B=this;e&&this._customAttributes&&0<this._customAttributes.length&&e.push.apply(e,this._customAttributes);this.ReviewUniform("uniform",f);this.ReviewUniform("sampler",c);if(this._isCreatedShader)return this._createdShaderName;this._isCreatedShader=!1;b.ShaderIndexer++;a="custom_"+b.ShaderIndexer;var h=this._afterBind.bind(this);this._afterBind=function(a,b){if(b){B.AttachAfterBind(a,b);try{h(a,b)}catch(K){}}};m.a.ShadersStore[a+"VertexShader"]=
this.VertexShader.replace("#define CUSTOM_VERTEX_BEGIN",this.CustomParts.Vertex_Begin?this.CustomParts.Vertex_Begin:"").replace("#define CUSTOM_VERTEX_DEFINITIONS",(this._customUniform?this._customUniform.join("\n"):"")+(this.CustomParts.Vertex_Definitions?this.CustomParts.Vertex_Definitions:"")).replace("#define CUSTOM_VERTEX_MAIN_BEGIN",this.CustomParts.Vertex_MainBegin?this.CustomParts.Vertex_MainBegin:"").replace("#define CUSTOM_VERTEX_UPDATE_POSITION",this.CustomParts.Vertex_Before_PositionUpdated?
this.CustomParts.Vertex_Before_PositionUpdated:"").replace("#define CUSTOM_VERTEX_UPDATE_NORMAL",this.CustomParts.Vertex_Before_NormalUpdated?this.CustomParts.Vertex_Before_NormalUpdated:"").replace("#define CUSTOM_VERTEX_MAIN_END",this.CustomParts.Vertex_MainEnd?this.CustomParts.Vertex_MainEnd:"");this.CustomParts.Vertex_After_WorldPosComputed&&(m.a.ShadersStore[a+"VertexShader"]=m.a.ShadersStore[a+"VertexShader"].replace("#define CUSTOM_VERTEX_UPDATE_WORLDPOS",this.CustomParts.Vertex_After_WorldPosComputed));
m.a.ShadersStore[a+"PixelShader"]=this.FragmentShader.replace("#define CUSTOM_FRAGMENT_BEGIN",this.CustomParts.Fragment_Begin?this.CustomParts.Fragment_Begin:"").replace("#define CUSTOM_FRAGMENT_MAIN_BEGIN",this.CustomParts.Fragment_MainBegin?this.CustomParts.Fragment_MainBegin:"").replace("#define CUSTOM_FRAGMENT_DEFINITIONS",(this._customUniform?this._customUniform.join("\n"):"")+(this.CustomParts.Fragment_Definitions?this.CustomParts.Fragment_Definitions:"")).replace("#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE",
this.CustomParts.Fragment_Custom_Diffuse?this.CustomParts.Fragment_Custom_Diffuse:"").replace("#define CUSTOM_FRAGMENT_UPDATE_ALPHA",this.CustomParts.Fragment_Custom_Alpha?this.CustomParts.Fragment_Custom_Alpha:"").replace("#define CUSTOM_FRAGMENT_BEFORE_LIGHTS",this.CustomParts.Fragment_Before_Lights?this.CustomParts.Fragment_Before_Lights:"").replace("#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR",this.CustomParts.Fragment_Before_FragColor?this.CustomParts.Fragment_Before_FragColor:"");this.CustomParts.Fragment_Before_Fog&&
(m.a.ShadersStore[a+"PixelShader"]=m.a.ShadersStore[a+"PixelShader"].replace("#define CUSTOM_FRAGMENT_BEFORE_FOG",this.CustomParts.Fragment_Before_Fog));this._isCreatedShader=!0;return this._createdShaderName=a};b.prototype.AddUniform=function(a,b,g){this._customUniform||(this._customUniform=[],this._newUniforms=[],this._newSamplerInstances={},this._newUniformInstances={});g&&(-1!=b.indexOf("sampler")?this._newSamplerInstances[b+"-"+a]=g:this._newUniformInstances[b+"-"+a]=g);this._customUniform.push("uniform "+
b+" "+a+";");this._newUniforms.push(a);return this};b.prototype.AddAttribute=function(a){this._customAttributes||(this._customAttributes=[]);this._customAttributes.push(a);return this};b.prototype.Fragment_Begin=function(a){this.CustomParts.Fragment_Begin=a;return this};b.prototype.Fragment_Definitions=function(a){this.CustomParts.Fragment_Definitions=a;return this};b.prototype.Fragment_MainBegin=function(a){this.CustomParts.Fragment_MainBegin=a;return this};b.prototype.Fragment_Custom_Diffuse=function(a){this.CustomParts.Fragment_Custom_Diffuse=
a.replace("result","diffuseColor");return this};b.prototype.Fragment_Custom_Alpha=function(a){this.CustomParts.Fragment_Custom_Alpha=a.replace("result","alpha");return this};b.prototype.Fragment_Before_Lights=function(a){this.CustomParts.Fragment_Before_Lights=a;return this};b.prototype.Fragment_Before_Fog=function(a){this.CustomParts.Fragment_Before_Fog=a;return this};b.prototype.Fragment_Before_FragColor=function(a){this.CustomParts.Fragment_Before_FragColor=a.replace("result","color");return this};
b.prototype.Vertex_Begin=function(a){this.CustomParts.Vertex_Begin=a;return this};b.prototype.Vertex_Definitions=function(a){this.CustomParts.Vertex_Definitions=a;return this};b.prototype.Vertex_MainBegin=function(a){this.CustomParts.Vertex_MainBegin=a;return this};b.prototype.Vertex_Before_PositionUpdated=function(a){this.CustomParts.Vertex_Before_PositionUpdated=a.replace("result","positionUpdated");return this};b.prototype.Vertex_Before_NormalUpdated=function(a){this.CustomParts.Vertex_Before_NormalUpdated=
a.replace("result","normalUpdated");return this};b.prototype.Vertex_After_WorldPosComputed=function(a){this.CustomParts.Vertex_After_WorldPosComputed=a;return this};b.prototype.Vertex_MainEnd=function(a){this.CustomParts.Vertex_MainEnd=a;return this};b.ShaderIndexer=1;return b}(p.a);t.a.RegisteredTypes["BABYLON.CustomMaterial"]=p;p=l("oXT7");var L=function(){return function(){}}();p=function(d){function b(a,b){a=d.call(this,a,b)||this;a.CustomParts=new L;a.customShaderNameResolve=a.Builder;a.FragmentShader=
m.a.ShadersStore.pbrPixelShader;a.VertexShader=m.a.ShadersStore.pbrVertexShader;a.FragmentShader=a.FragmentShader.replace(/#include<pbrBlockAlbedoOpacity>/g,m.a.IncludesShadersStore.pbrBlockAlbedoOpacity);a.FragmentShader=a.FragmentShader.replace(/#include<pbrBlockReflectivity>/g,m.a.IncludesShadersStore.pbrBlockReflectivity);a.FragmentShader=a.FragmentShader.replace(/#include<pbrBlockFinalColorComposition>/g,m.a.IncludesShadersStore.pbrBlockFinalColorComposition);return a}Object(e.c)(b,d);b.prototype.AttachAfterBind=
function(a,b){if(this._newUniformInstances)for(var f in this._newUniformInstances)a=f.toString().split("-"),"vec2"==a[0]?b.setVector2(a[1],this._newUniformInstances[f]):"vec3"==a[0]?b.setVector3(a[1],this._newUniformInstances[f]):"vec4"==a[0]?b.setVector4(a[1],this._newUniformInstances[f]):"mat4"==a[0]?b.setMatrix(a[1],this._newUniformInstances[f]):"float"==a[0]&&b.setFloat(a[1],this._newUniformInstances[f]);if(this._newSamplerInstances)for(f in this._newSamplerInstances)a=f.toString().split("-"),
"sampler2D"==a[0]&&this._newSamplerInstances[f].isReady&&this._newSamplerInstances[f].isReady()&&b.setTexture(a[1],this._newSamplerInstances[f])};b.prototype.ReviewUniform=function(a,b){if("uniform"==a&&this._newUniforms)for(var f=0;f<this._newUniforms.length;f++)-1==this._customUniform[f].indexOf("sampler")&&b.push(this._newUniforms[f]);if("sampler"==a&&this._newUniforms)for(f=0;f<this._newUniforms.length;f++)-1!=this._customUniform[f].indexOf("sampler")&&b.push(this._newUniforms[f]);return b};b.prototype.Builder=
function(a,f,g,c,d,e){var B=this;e&&this._customAttributes&&0<this._customAttributes.length&&e.push.apply(e,this._customAttributes);this.ReviewUniform("uniform",f);this.ReviewUniform("sampler",c);if(this._isCreatedShader)return this._createdShaderName;this._isCreatedShader=!1;b.ShaderIndexer++;a="custom_"+b.ShaderIndexer;var h=this._afterBind.bind(this);this._afterBind=function(a,b){if(b){B.AttachAfterBind(a,b);try{h(a,b)}catch(K){}}};m.a.ShadersStore[a+"VertexShader"]=this.VertexShader.replace("#define CUSTOM_VERTEX_BEGIN",
this.CustomParts.Vertex_Begin?this.CustomParts.Vertex_Begin:"").replace("#define CUSTOM_VERTEX_DEFINITIONS",(this._customUniform?this._customUniform.join("\n"):"")+(this.CustomParts.Vertex_Definitions?this.CustomParts.Vertex_Definitions:"")).replace("#define CUSTOM_VERTEX_MAIN_BEGIN",this.CustomParts.Vertex_MainBegin?this.CustomParts.Vertex_MainBegin:"").replace("#define CUSTOM_VERTEX_UPDATE_POSITION",this.CustomParts.Vertex_Before_PositionUpdated?this.CustomParts.Vertex_Before_PositionUpdated:"").replace("#define CUSTOM_VERTEX_UPDATE_NORMAL",
this.CustomParts.Vertex_Before_NormalUpdated?this.CustomParts.Vertex_Before_NormalUpdated:"").replace("#define CUSTOM_VERTEX_MAIN_END",this.CustomParts.Vertex_MainEnd?this.CustomParts.Vertex_MainEnd:"");this.CustomParts.Vertex_After_WorldPosComputed&&(m.a.ShadersStore[a+"VertexShader"]=m.a.ShadersStore[a+"VertexShader"].replace("#define CUSTOM_VERTEX_UPDATE_WORLDPOS",this.CustomParts.Vertex_After_WorldPosComputed));m.a.ShadersStore[a+"PixelShader"]=this.FragmentShader.replace("#define CUSTOM_FRAGMENT_BEGIN",
this.CustomParts.Fragment_Begin?this.CustomParts.Fragment_Begin:"").replace("#define CUSTOM_FRAGMENT_MAIN_BEGIN",this.CustomParts.Fragment_MainBegin?this.CustomParts.Fragment_MainBegin:"").replace("#define CUSTOM_FRAGMENT_DEFINITIONS",(this._customUniform?this._customUniform.join("\n"):"")+(this.CustomParts.Fragment_Definitions?this.CustomParts.Fragment_Definitions:"")).replace("#define CUSTOM_FRAGMENT_UPDATE_ALBEDO",this.CustomParts.Fragment_Custom_Albedo?this.CustomParts.Fragment_Custom_Albedo:
"").replace("#define CUSTOM_FRAGMENT_UPDATE_ALPHA",this.CustomParts.Fragment_Custom_Alpha?this.CustomParts.Fragment_Custom_Alpha:"").replace("#define CUSTOM_FRAGMENT_BEFORE_LIGHTS",this.CustomParts.Fragment_Before_Lights?this.CustomParts.Fragment_Before_Lights:"").replace("#define CUSTOM_FRAGMENT_UPDATE_METALLICROUGHNESS",this.CustomParts.Fragment_Custom_MetallicRoughness?this.CustomParts.Fragment_Custom_MetallicRoughness:"").replace("#define CUSTOM_FRAGMENT_UPDATE_MICROSURFACE",this.CustomParts.Fragment_Custom_MicroSurface?
this.CustomParts.Fragment_Custom_MicroSurface:"").replace("#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR",this.CustomParts.Fragment_Before_FragColor?this.CustomParts.Fragment_Before_FragColor:"");this.CustomParts.Fragment_Before_Fog&&(m.a.ShadersStore[a+"PixelShader"]=m.a.ShadersStore[a+"PixelShader"].replace("#define CUSTOM_FRAGMENT_BEFORE_FOG",this.CustomParts.Fragment_Before_Fog));this._isCreatedShader=!0;return this._createdShaderName=a};b.prototype.AddUniform=function(a,b,g){this._customUniform||
(this._customUniform=[],this._newUniforms=[],this._newSamplerInstances={},this._newUniformInstances={});g&&(-1!=b.indexOf("sampler")?this._newSamplerInstances[b+"-"+a]=g:this._newUniformInstances[b+"-"+a]=g);this._customUniform.push("uniform "+b+" "+a+";");this._newUniforms.push(a);return this};b.prototype.AddAttribute=function(a){this._customAttributes||(this._customAttributes=[]);this._customAttributes.push(a);return this};b.prototype.Fragment_Begin=function(a){this.CustomParts.Fragment_Begin=a;
return this};b.prototype.Fragment_Definitions=function(a){this.CustomParts.Fragment_Definitions=a;return this};b.prototype.Fragment_MainBegin=function(a){this.CustomParts.Fragment_MainBegin=a;return this};b.prototype.Fragment_Custom_Albedo=function(a){this.CustomParts.Fragment_Custom_Albedo=a.replace("result","surfaceAlbedo");return this};b.prototype.Fragment_Custom_Alpha=function(a){this.CustomParts.Fragment_Custom_Alpha=a.replace("result","alpha");return this};b.prototype.Fragment_Before_Lights=
function(a){this.CustomParts.Fragment_Before_Lights=a;return this};b.prototype.Fragment_Custom_MetallicRoughness=function(a){this.CustomParts.Fragment_Custom_MetallicRoughness=a;return this};b.prototype.Fragment_Custom_MicroSurface=function(a){this.CustomParts.Fragment_Custom_MicroSurface=a;return this};b.prototype.Fragment_Before_Fog=function(a){this.CustomParts.Fragment_Before_Fog=a;return this};b.prototype.Fragment_Before_FragColor=function(a){this.CustomParts.Fragment_Before_FragColor=a.replace("result",
"color");return this};b.prototype.Vertex_Begin=function(a){this.CustomParts.Vertex_Begin=a;return this};b.prototype.Vertex_Definitions=function(a){this.CustomParts.Vertex_Definitions=a;return this};b.prototype.Vertex_MainBegin=function(a){this.CustomParts.Vertex_MainBegin=a;return this};b.prototype.Vertex_Before_PositionUpdated=function(a){this.CustomParts.Vertex_Before_PositionUpdated=a.replace("result","positionUpdated");return this};b.prototype.Vertex_Before_NormalUpdated=function(a){this.CustomParts.Vertex_Before_NormalUpdated=
a.replace("result","normalUpdated");return this};b.prototype.Vertex_After_WorldPosComputed=function(a){this.CustomParts.Vertex_After_WorldPosComputed=a;return this};b.prototype.Vertex_MainEnd=function(a){this.CustomParts.Vertex_MainEnd=a;return this};b.ShaderIndexer=1;return b}(p.a);t.a.RegisteredTypes["BABYLON.PBRCustomMaterial"]=p;var C=l("cSa5"),z=l("aCSs");m.a.ShadersStore.firePixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n\nuniform sampler2D distortionSampler;\nuniform sampler2D opacitySampler;\n#ifdef DIFFUSE\nvarying vec2 vDistortionCoords1;\nvarying vec2 vDistortionCoords2;\nvarying vec2 vDistortionCoords3;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvec4 bx2(vec4 x)\n{\nreturn vec4(2.0)*x-vec4(1.0);\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\n\nfloat alpha=1.0;\n#ifdef DIFFUSE\n\nconst float distortionAmount0=0.092;\nconst float distortionAmount1=0.092;\nconst float distortionAmount2=0.092;\nvec2 heightAttenuation=vec2(0.3,0.39);\nvec4 noise0=texture2D(distortionSampler,vDistortionCoords1);\nvec4 noise1=texture2D(distortionSampler,vDistortionCoords2);\nvec4 noise2=texture2D(distortionSampler,vDistortionCoords3);\nvec4 noiseSum=bx2(noise0)*distortionAmount0+bx2(noise1)*distortionAmount1+bx2(noise2)*distortionAmount2;\nvec4 perturbedBaseCoords=vec4(vDiffuseUV,0.0,1.0)+noiseSum*(vDiffuseUV.y*heightAttenuation.x+heightAttenuation.y);\nvec4 opacityColor=texture2D(opacitySampler,perturbedBaseCoords.xy);\n#ifdef ALPHATEST\nif (opacityColor.r<0.1)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor=texture2D(diffuseSampler,perturbedBaseCoords.xy)*2.0;\nbaseColor*=opacityColor;\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(1.0,1.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n\nvec4 color=vec4(baseColor.rgb,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}";
m.a.ShadersStore.fireVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n\nuniform float time;\nuniform float speed;\n#ifdef DIFFUSE\nvarying vec2 vDistortionCoords1;\nvarying vec2 vDistortionCoords2;\nvarying vec2 vDistortionCoords3;\n#endif\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n\n#ifdef DIFFUSE\nvDiffuseUV=uv;\nvDiffuseUV.y-=0.2;\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n#ifdef DIFFUSE\n\nvec3 layerSpeed=vec3(-0.2,-0.52,-0.1)*speed;\nvDistortionCoords1.x=uv.x;\nvDistortionCoords1.y=uv.y+layerSpeed.x*time/1000.0;\nvDistortionCoords2.x=uv.x;\nvDistortionCoords2.y=uv.y+layerSpeed.y*time/1000.0;\nvDistortionCoords3.x=uv.x;\nvDistortionCoords3.y=uv.y+layerSpeed.z*time/1000.0;\n#endif\n}\n";
var M=function(d){function b(){var a=d.call(this)||this;a.DIFFUSE=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.UV1=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.BonesPerMesh=0;a.NUM_BONE_INFLUENCERS=0;a.INSTANCES=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,a,b)||this;a.diffuseColor=new r.a(1,1,1);a.speed=1;
a._scaledDiffuse=new r.a;a._lastTime=0;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return!1};b.prototype.needAlphaTesting=function(){return!0};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,g){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new M);var c=b._materialDefines,f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var d=f.getEngine();if(c._areTexturesDirty&&
(c._needUVs=!1,this._diffuseTexture&&q.a.DiffuseTextureEnabled))if(this._diffuseTexture.isReady())c._needUVs=!0,c.DIFFUSE=!0;else return!1;c.ALPHATEST=this._opacityTexture?!0:!1;c._areMiscDirty&&(c.POINTSIZE=this.pointsCloud||f.forcePointsCloud,c.FOG=f.fogEnabled&&a.applyFog&&f.fogMode!==x.a.FOGMODE_NONE&&this.fogEnabled);h.a.PrepareDefinesForFrameBoundValues(f,d,c,g?!0:!1);h.a.PrepareDefinesForAttributes(a,c,!1,!0);if(c.isDirty){c.markAsProcessed();f.resetCachedMaterial();g=new y.a;c.FOG&&g.addFallback(1,
"FOG");0<c.NUM_BONE_INFLUENCERS&&g.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;var e=[n.b.PositionKind];c.UV1&&e.push(n.b.UVKind);c.VERTEXCOLOR&&e.push(n.b.ColorKind);h.a.PrepareAttributesForBones(e,a,c,g);h.a.PrepareAttributesForInstances(e,c);a=c.toString();b.setEffect(f.getEngine().createEffect("fire",{attributes:e,uniformsNames:"world view viewProjection vEyePosition vFogInfos vFogColor pointSize vDiffuseInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 diffuseMatrix time speed".split(" "),
uniformBuffersNames:[],samplers:["diffuseSampler","distortionSampler","opacitySampler"],defines:a,fallbacks:g,onCompiled:this.onCompiled,onError:this.onError,indexParameters:null,maxSimultaneousLights:4,transformFeedbackVaryings:null},d),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,g){var c=this.getScene();g._materialDefines&&(g=g.effect)&&(this._activeEffect=g,this.bindOnlyWorldMatrix(a),
this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._mustRebind(c,g)&&(this._diffuseTexture&&q.a.DiffuseTextureEnabled&&(this._activeEffect.setTexture("diffuseSampler",this._diffuseTexture),this._activeEffect.setFloat2("vDiffuseInfos",this._diffuseTexture.coordinatesIndex,this._diffuseTexture.level),this._activeEffect.setMatrix("diffuseMatrix",this._diffuseTexture.getTextureMatrix()),this._activeEffect.setTexture("distortionSampler",
this._distortionTexture),this._activeEffect.setTexture("opacitySampler",this._opacityTexture)),h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(g,c)),this._activeEffect.setColor4("vDiffuseColor",this._scaledDiffuse,this.alpha*b.visibility),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._lastTime+=c.getEngine().getDeltaTime(),
this._activeEffect.setFloat("time",this._lastTime),this._activeEffect.setFloat("speed",this.speed),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=function(){var a=[];this._diffuseTexture&&this._diffuseTexture.animations&&0<this._diffuseTexture.animations.length&&a.push(this._diffuseTexture);this._distortionTexture&&this._distortionTexture.animations&&0<this._distortionTexture.animations.length&&a.push(this._distortionTexture);this._opacityTexture&&this._opacityTexture.animations&&
0<this._opacityTexture.animations.length&&a.push(this._opacityTexture);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._diffuseTexture&&a.push(this._diffuseTexture);this._distortionTexture&&a.push(this._distortionTexture);this._opacityTexture&&a.push(this._opacityTexture);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)||this._diffuseTexture===a||this._distortionTexture===a||this._opacityTexture===a?!0:!1};
b.prototype.getClassName=function(){return"FireMaterial"};b.prototype.dispose=function(a){this._diffuseTexture&&this._diffuseTexture.dispose();this._distortionTexture&&this._distortionTexture.dispose();k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=k.prototype.serialize.call(this);a.customType="BABYLON.FireMaterial";a.diffuseColor=this.diffuseColor.asArray();a.speed=
this.speed;this._diffuseTexture&&(a._diffuseTexture=this._diffuseTexture.serialize());this._distortionTexture&&(a._distortionTexture=this._distortionTexture.serialize());this._opacityTexture&&(a._opacityTexture=this._opacityTexture.serialize());return a};b.Parse=function(a,f,g){var c=new b(a.name,f);c.diffuseColor=r.a.FromArray(a.diffuseColor);c.speed=a.speed;c.alpha=a.alpha;c.id=a.id;C.a.AddTagsTo(c,a.tags);c.backFaceCulling=a.backFaceCulling;c.wireframe=a.wireframe;a._diffuseTexture&&(c._diffuseTexture=
z.a.Parse(a._diffuseTexture,f,g));a._distortionTexture&&(c._distortionTexture=z.a.Parse(a._distortionTexture,f,g));a._opacityTexture&&(c._opacityTexture=z.a.Parse(a._opacityTexture,f,g));return c};Object(e.b)([Object(d.m)("diffuseTexture")],b.prototype,"_diffuseTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture",void 0);Object(e.b)([Object(d.m)("distortionTexture")],b.prototype,"_distortionTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],
b.prototype,"distortionTexture",void 0);Object(e.b)([Object(d.m)("opacityTexture")],b.prototype,"_opacityTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"opacityTexture",void 0);Object(e.b)([Object(d.e)("diffuse")],b.prototype,"diffuseColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"speed",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.FireMaterial"]=p;var u=l("/SR9"),N=l("WrCc");m.a.ShadersStore.furPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nuniform vec4 furColor;\nuniform float furLength;\nvarying vec3 vPositionW;\nvarying float vfur_length;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n\n#ifdef HIGHLEVEL\nuniform float furOffset;\nuniform float furOcclusion;\nuniform sampler2D furTexture;\nvarying vec2 vFurUV;\n#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<fogFragmentDeclaration>\n#include<clipPlaneFragmentDeclaration>\nfloat Rand(vec3 rv) {\nfloat x=dot(rv,vec3(12.9898,78.233,24.65487));\nreturn fract(sin(x)*43758.5453);\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=furColor;\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor*=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef HIGHLEVEL\n\nvec4 furTextureColor=texture2D(furTexture,vec2(vFurUV.x,vFurUV.y));\nif (furTextureColor.a<=0.0 || furTextureColor.g<furOffset) {\ndiscard;\n}\nfloat occlusion=mix(0.0,furTextureColor.b*1.2,furOffset);\nbaseColor=vec4(baseColor.xyz*max(occlusion,furOcclusion),1.1-furOffset);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase.rgb*baseColor.rgb,0.0,1.0);\n\n#ifdef HIGHLEVEL\nvec4 color=vec4(finalDiffuse,alpha);\n#else\nfloat r=vfur_length/furLength*0.5;\nvec4 color=vec4(finalDiffuse*(0.5+r),alpha);\n#endif\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}";
m.a.ShadersStore.furVertexShader="precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\nuniform float furLength;\nuniform float furAngle;\n#ifdef HIGHLEVEL\nuniform float furOffset;\nuniform vec3 furGravity;\nuniform float furTime;\nuniform float furSpacing;\nuniform float furDensity;\n#endif\n#ifdef HEIGHTMAP\nuniform sampler2D heightTexture;\n#endif\n#ifdef HIGHLEVEL\nvarying vec2 vFurUV;\n#endif\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\nvarying float vfur_length;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nfloat Rand(vec3 rv) {\nfloat x=dot(rv,vec3(12.9898,78.233,24.65487));\nreturn fract(sin(x)*43758.5453);\n}\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\n\nfloat r=Rand(position);\n#ifdef HEIGHTMAP\n#if __VERSION__>100\nvfur_length=furLength*texture(heightTexture,uv).x;\n#else\nvfur_length=furLength*texture2D(heightTexture,uv).r;\n#endif\n#else\nvfur_length=(furLength*r);\n#endif\nvec3 tangent1=vec3(normal.y,-normal.x,0);\nvec3 tangent2=vec3(-normal.z,0,normal.x);\nr=Rand(tangent1*r);\nfloat J=(2.0+4.0*r);\nr=Rand(tangent2*r);\nfloat K=(2.0+2.0*r);\ntangent1=tangent1*J+tangent2*K;\ntangent1=normalize(tangent1);\nvec3 newPosition=position+normal*vfur_length*cos(furAngle)+tangent1*vfur_length*sin(furAngle);\n#ifdef HIGHLEVEL\n\nvec3 forceDirection=vec3(0.0,0.0,0.0);\nforceDirection.x=sin(furTime+position.x*0.05)*0.2;\nforceDirection.y=cos(furTime*0.7+position.y*0.04)*0.2;\nforceDirection.z=sin(furTime*0.7+position.z*0.04)*0.2;\nvec3 displacement=vec3(0.0,0.0,0.0);\ndisplacement=furGravity+forceDirection;\nfloat displacementFactor=pow(furOffset,3.0);\nvec3 aNormal=normal;\naNormal.xyz+=displacement*displacementFactor;\nnewPosition=vec3(newPosition.x,newPosition.y,newPosition.z)+(normalize(aNormal)*furOffset*furSpacing);\n#endif\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\ngl_Position=viewProjection*finalWorld*vec4(newPosition,1.0);\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\nvPositionW=vec3(worldPos);\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#ifdef HIGHLEVEL\nvFurUV=vDiffuseUV*furDensity;\n#endif\n#else\n#ifdef HIGHLEVEL\nvFurUV=uv*furDensity;\n#endif\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var O=function(d){function b(){var a=d.call(this)||this;a.DIFFUSE=!1;a.HEIGHTMAP=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.HIGHLEVEL=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,
a,b)||this;a.diffuseColor=new r.a(1,1,1);a.furLength=1;a.furAngle=0;a.furColor=new r.a(.44,.21,.02);a.furOffset=0;a.furSpacing=12;a.furGravity=new u.e(0,0,0);a.furSpeed=100;a.furDensity=20;a.furOcclusion=0;a._disableLighting=!1;a._maxSimultaneousLights=4;a.highLevelFur=!0;a._furTime=0;return a}Object(e.c)(b,k);Object.defineProperty(b.prototype,"furTime",{get:function(){return this._furTime},set:function(a){this._furTime=a},enumerable:!1,configurable:!0});b.prototype.needAlphaBlending=function(){return 1>
this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.updateFur=function(){for(var a=1;a<this._meshes.length;a++){var b=this._meshes[a].material;b.furLength=this.furLength;b.furAngle=this.furAngle;b.furGravity=this.furGravity;b.furSpacing=this.furSpacing;b.furSpeed=this.furSpeed;b.furColor=this.furColor;b.diffuseTexture=this.diffuseTexture;b.furTexture=this.furTexture;b.highLevelFur=this.highLevelFur;b.furTime=this.furTime;
b.furDensity=this.furDensity}};b.prototype.isReadyForSubMesh=function(a,b,g){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new O);var c=b._materialDefines,f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var d=f.getEngine();if(c._areTexturesDirty&&f.texturesEnabled){if(this.diffuseTexture&&q.a.DiffuseTextureEnabled)if(this.diffuseTexture.isReady())c._needUVs=!0,c.DIFFUSE=!0;else return!1;if(this.heightTexture&&d.getCaps().maxVertexTextureImageUnits)if(this.heightTexture.isReady())c._needUVs=
!0,c.HEIGHTMAP=!0;else return!1}this.highLevelFur!==c.HIGHLEVEL&&(c.HIGHLEVEL=!0,c.markAsUnprocessed());h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);c._needNormals=h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);h.a.PrepareDefinesForFrameBoundValues(f,d,c,g?!0:!1);h.a.PrepareDefinesForAttributes(a,c,!0,!0);if(c.isDirty){c.markAsProcessed();f.resetCachedMaterial();g=new y.a;c.FOG&&g.addFallback(1,"FOG");
h.a.HandleFallbacksForShadows(c,g,this.maxSimultaneousLights);0<c.NUM_BONE_INFLUENCERS&&g.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;var e=[n.b.PositionKind];c.NORMAL&&e.push(n.b.NormalKind);c.UV1&&e.push(n.b.UVKind);c.UV2&&e.push(n.b.UV2Kind);c.VERTEXCOLOR&&e.push(n.b.ColorKind);h.a.PrepareAttributesForBones(e,a,c,g);h.a.PrepareAttributesForInstances(e,c);a=c.toString();var k="world view viewProjection vEyePosition vLightsType vDiffuseColor vFogInfos vFogColor pointSize vDiffuseInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 diffuseMatrix furLength furAngle furColor furOffset furGravity furTime furSpacing furDensity furOcclusion".split(" "),
l=["diffuseSampler","heightTexture","furTexture"],m=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:this.maxSimultaneousLights});b.setEffect(f.getEngine().createEffect("fur",{attributes:e,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:g,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this.maxSimultaneousLights}},d),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=
f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,g){var c=this.getScene(),f=g._materialDefines;f&&(g=g.effect)&&(this._activeEffect=g,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),c.getCachedMaterial()!==this&&(this._diffuseTexture&&q.a.DiffuseTextureEnabled&&(this._activeEffect.setTexture("diffuseSampler",this._diffuseTexture),this._activeEffect.setFloat2("vDiffuseInfos",
this._diffuseTexture.coordinatesIndex,this._diffuseTexture.level),this._activeEffect.setMatrix("diffuseMatrix",this._diffuseTexture.getTextureMatrix())),this._heightTexture&&this._activeEffect.setTexture("heightTexture",this._heightTexture),h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(g,c)),this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*b.visibility),c.lightsEnabled&&!this.disableLighting&&
h.a.BindLights(c,b,this._activeEffect,f,this.maxSimultaneousLights),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._activeEffect.setFloat("furLength",this.furLength),this._activeEffect.setFloat("furAngle",this.furAngle),this._activeEffect.setColor4("furColor",this.furColor,1),this.highLevelFur&&(this._activeEffect.setVector3("furGravity",this.furGravity),this._activeEffect.setFloat("furOffset",
this.furOffset),this._activeEffect.setFloat("furSpacing",this.furSpacing),this._activeEffect.setFloat("furDensity",this.furDensity),this._activeEffect.setFloat("furOcclusion",this.furOcclusion),this._furTime+=this.getScene().getEngine().getDeltaTime()/this.furSpeed,this._activeEffect.setFloat("furTime",this._furTime),this._activeEffect.setTexture("furTexture",this.furTexture)),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=function(){var a=[];this.diffuseTexture&&this.diffuseTexture.animations&&
0<this.diffuseTexture.animations.length&&a.push(this.diffuseTexture);this.heightTexture&&this.heightTexture.animations&&0<this.heightTexture.animations.length&&a.push(this.heightTexture);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._diffuseTexture&&a.push(this._diffuseTexture);this._heightTexture&&a.push(this._heightTexture);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)||this.diffuseTexture===a||this._heightTexture===
a?!0:!1};b.prototype.dispose=function(a){this.diffuseTexture&&this.diffuseTexture.dispose();if(this._meshes)for(var b=1;b<this._meshes.length;b++){var g=this._meshes[b].material;g&&g.dispose(a);this._meshes[b].dispose()}k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.FurMaterial";this._meshes&&(a.sourceMeshName=this._meshes[0].name,
a.quality=this._meshes.length);return a};b.prototype.getClassName=function(){return"FurMaterial"};b.Parse=function(a,f,g){var c=d.a.Parse(function(){return new b(a.name,f)},a,f,g);a.sourceMeshName&&c.highLevelFur&&f.executeWhenReady(function(){var g=f.getMeshByName(a.sourceMeshName);if(g){var d=b.GenerateTexture("Fur Texture",f);c.furTexture=d;b.FurifyMesh(g,a.quality)}});return c};b.GenerateTexture=function(a,b){a=new N.a("FurTexture "+a,256,b,!0);b=a.getContext();for(var f=0;2E4>f;++f)b.fillStyle=
"rgba(255, "+Math.floor(255*Math.random())+", "+Math.floor(255*Math.random())+", 1)",b.fillRect(Math.random()*a.getSize().width,Math.random()*a.getSize().height,2,2);a.update(!1);a.wrapU=z.a.WRAP_ADDRESSMODE;a.wrapV=z.a.WRAP_ADDRESSMODE;return a};b.FurifyMesh=function(a,f){var g=[a],c=a.material,d;if(!(c instanceof b))throw"The material of the source mesh must be a Fur Material";for(d=1;d<f;d++){var e=new b(c.name+d,a.getScene());a.getScene().materials.pop();C.a.EnableFor(e);C.a.AddTagsTo(e,"furShellMaterial");
e.furLength=c.furLength;e.furAngle=c.furAngle;e.furGravity=c.furGravity;e.furSpacing=c.furSpacing;e.furSpeed=c.furSpeed;e.furColor=c.furColor;e.diffuseTexture=c.diffuseTexture;e.furOffset=d/f;e.furTexture=c.furTexture;e.highLevelFur=c.highLevelFur;e.furTime=c.furTime;e.furDensity=c.furDensity;var h=a.clone(a.name+d);h.material=e;h.skeleton=a.skeleton;h.position=u.e.Zero();g.push(h)}for(d=1;d<g.length;d++)g[d].parent=a;return a.material._meshes=g};Object(e.b)([Object(d.m)("diffuseTexture")],b.prototype,
"_diffuseTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture",void 0);Object(e.b)([Object(d.m)("heightTexture")],b.prototype,"_heightTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"heightTexture",void 0);Object(e.b)([Object(d.e)()],b.prototype,"diffuseColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"furLength",void 0);Object(e.b)([Object(d.c)()],b.prototype,"furAngle",void 0);Object(e.b)([Object(d.e)()],
b.prototype,"furColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"furOffset",void 0);Object(e.b)([Object(d.c)()],b.prototype,"furSpacing",void 0);Object(e.b)([Object(d.o)()],b.prototype,"furGravity",void 0);Object(e.b)([Object(d.c)()],b.prototype,"furSpeed",void 0);Object(e.b)([Object(d.c)()],b.prototype,"furDensity",void 0);Object(e.b)([Object(d.c)()],b.prototype,"furOcclusion",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],
b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);Object(e.b)([Object(d.c)()],b.prototype,"highLevelFur",void 0);Object(e.b)([Object(d.c)()],b.prototype,"furTime",null);return b}(w.a);t.a.RegisteredTypes["BABYLON.FurMaterial"]=p;m.a.ShadersStore.gradientPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\n\nuniform vec4 topColor;\nuniform vec4 bottomColor;\nuniform float offset;\nuniform float scale;\nuniform float smoothness;\n\nvarying vec3 vPositionW;\nvarying vec3 vPosition;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\nfloat h=vPosition.y*scale+offset;\nfloat mysmoothness=clamp(smoothness,0.01,max(smoothness,10.));\nvec4 baseColor=mix(bottomColor,topColor,max(pow(max(h,0.0),mysmoothness),0.0));\n\nvec3 diffuseColor=baseColor.rgb;\n\nfloat alpha=baseColor.a;\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\n#ifdef EMISSIVE\nvec3 diffuseBase=baseColor.rgb;\n#else\nvec3 diffuseBase=vec3(0.,0.,0.);\n#endif\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}\n";
m.a.ShadersStore.gradientVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\nvarying vec3 vPosition;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\nvPosition=position;\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var P=function(d){function b(){var a=d.call(this)||this;a.EMISSIVE=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,a,b)||this;a._maxSimultaneousLights=
4;a.topColor=new r.a(1,0,0);a.topColorAlpha=1;a.bottomColor=new r.a(0,0,1);a.bottomColorAlpha=1;a.offset=0;a.scale=1;a.smoothness=1;a._disableLighting=!1;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha||1>this.topColorAlpha||1>this.bottomColorAlpha};b.prototype.needAlphaTesting=function(){return!0};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,g){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;
b._materialDefines||(b._materialDefines=new P);var c=b._materialDefines,f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var d=f.getEngine();h.a.PrepareDefinesForFrameBoundValues(f,d,c,g?!0:!1);h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);c._needNormals=h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);c.EMISSIVE=this._disableLighting;h.a.PrepareDefinesForAttributes(a,c,!1,!0);if(c.isDirty){c.markAsProcessed();
f.resetCachedMaterial();g=new y.a;c.FOG&&g.addFallback(1,"FOG");h.a.HandleFallbacksForShadows(c,g);0<c.NUM_BONE_INFLUENCERS&&g.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;var e=[n.b.PositionKind];c.NORMAL&&e.push(n.b.NormalKind);c.UV1&&e.push(n.b.UVKind);c.UV2&&e.push(n.b.UV2Kind);c.VERTEXCOLOR&&e.push(n.b.ColorKind);h.a.PrepareAttributesForBones(e,a,c,g);h.a.PrepareAttributesForInstances(e,c);a=c.toString();var k="world view viewProjection vEyePosition vLightsType vFogInfos vFogColor pointSize mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 topColor bottomColor offset smoothness scale".split(" "),
l=[],m=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:4});b.setEffect(f.getEngine().createEffect("gradient",{attributes:e,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:g,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:4}},d),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=
function(a,b,g){var c=this.getScene(),f=g._materialDefines;f&&(g=g.effect)&&(this._activeEffect=g,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,g),this._mustRebind(c,g)&&(h.a.BindClipPlane(g,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(g,c)),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,f,this.maxSimultaneousLights),c.fogEnabled&&b.applyFog&&
c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._activeEffect.setColor4("topColor",this.topColor,this.topColorAlpha),this._activeEffect.setColor4("bottomColor",this.bottomColor,this.bottomColorAlpha),this._activeEffect.setFloat("offset",this.offset),this._activeEffect.setFloat("scale",this.scale),this._activeEffect.setFloat("smoothness",this.smoothness),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=
function(){return[]};b.prototype.dispose=function(a){k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.GradientMaterial";return a};b.prototype.getClassName=function(){return"GradientMaterial"};b.Parse=function(a,f,g){return d.a.Parse(function(){return new b(a.name,f)},a,f,g)};Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,
"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);Object(e.b)([Object(d.e)()],b.prototype,"topColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"topColorAlpha",void 0);Object(e.b)([Object(d.e)()],b.prototype,"bottomColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"bottomColorAlpha",void 0);Object(e.b)([Object(d.c)()],b.prototype,"offset",void 0);Object(e.b)([Object(d.c)()],b.prototype,"scale",void 0);
Object(e.b)([Object(d.c)()],b.prototype,"smoothness",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"disableLighting",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.GradientMaterial"]=p;m.a.ShadersStore.gridPixelShader="#extension GL_OES_standard_derivatives : enable\n#define SQRT2 1.41421356\n#define PI 3.14159\nprecision highp float;\nuniform vec3 mainColor;\nuniform vec3 lineColor;\nuniform vec4 gridControl;\nuniform vec3 gridOffset;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#include<fogFragmentDeclaration>\n\n#ifdef OPACITY\nvarying vec2 vOpacityUV;\nuniform sampler2D opacitySampler;\nuniform vec2 vOpacityInfos;\n#endif\nfloat getVisibility(float position) {\n\nfloat majorGridFrequency=gridControl.y;\nif (floor(position+0.5) == floor(position/majorGridFrequency+0.5)*majorGridFrequency)\n{\nreturn 1.0;\n}\nreturn gridControl.z;\n}\nfloat getAnisotropicAttenuation(float differentialLength) {\nconst float maxNumberOfLines=10.0;\nreturn clamp(1.0/(differentialLength+1.0)-1.0/maxNumberOfLines,0.0,1.0);\n}\nfloat isPointOnLine(float position,float differentialLength) {\nfloat fractionPartOfPosition=position-floor(position+0.5);\nfractionPartOfPosition/=differentialLength;\nfractionPartOfPosition=clamp(fractionPartOfPosition,-1.,1.);\nfloat result=0.5+0.5*cos(fractionPartOfPosition*PI);\nreturn result;\n}\nfloat contributionOnAxis(float position) {\nfloat differentialLength=length(vec2(dFdx(position),dFdy(position)));\ndifferentialLength*=SQRT2;\n\nfloat result=isPointOnLine(position,differentialLength);\n\nfloat visibility=getVisibility(position);\nresult*=visibility;\n\nfloat anisotropicAttenuation=getAnisotropicAttenuation(differentialLength);\nresult*=anisotropicAttenuation;\nreturn result;\n}\nfloat normalImpactOnAxis(float x) {\nfloat normalImpact=clamp(1.0-3.0*abs(x*x*x),0.0,1.0);\nreturn normalImpact;\n}\nvoid main(void) {\n\nfloat gridRatio=gridControl.x;\nvec3 gridPos=(vPosition+gridOffset.xyz)/gridRatio;\n\nfloat x=contributionOnAxis(gridPos.x);\nfloat y=contributionOnAxis(gridPos.y);\nfloat z=contributionOnAxis(gridPos.z);\n\nvec3 normal=normalize(vNormal);\nx*=normalImpactOnAxis(normal.x);\ny*=normalImpactOnAxis(normal.y);\nz*=normalImpactOnAxis(normal.z);\n\nfloat grid=clamp(x+y+z,0.,1.);\n\nvec3 color=mix(mainColor,lineColor,grid);\n#ifdef FOG\n#include<fogFragment>\n#endif\nfloat opacity=1.0;\n#ifdef TRANSPARENT\nopacity=clamp(grid,0.08,gridControl.w*grid);\n#endif\n#ifdef OPACITY\nopacity*=texture2D(opacitySampler,vOpacityUV).a;\n#endif\n\ngl_FragColor=vec4(color.rgb,opacity);\n#ifdef TRANSPARENT\n#ifdef PREMULTIPLYALPHA\ngl_FragColor.rgb*=opacity;\n#endif\n#else\n#endif\n#include<imageProcessingCompatibility>\n}";
m.a.ShadersStore.gridVertexShader="precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#include<instancesDeclaration>\n\nuniform mat4 projection;\nuniform mat4 view;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#include<fogVertexDeclaration>\n#ifdef OPACITY\nvarying vec2 vOpacityUV;\nuniform mat4 opacityMatrix;\nuniform vec2 vOpacityInfos;\n#endif\nvoid main(void) {\n#include<instancesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\n#include<fogVertex>\nvec4 cameraSpacePosition=view*worldPos;\ngl_Position=projection*cameraSpacePosition;\n#ifdef OPACITY\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\nif (vOpacityInfos.x == 0.)\n{\nvOpacityUV=vec2(opacityMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvOpacityUV=vec2(opacityMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\nvPosition=position;\nvNormal=normal;\n}";
var Q=function(d){function b(){var a=d.call(this)||this;a.OPACITY=!1;a.TRANSPARENT=!1;a.FOG=!1;a.PREMULTIPLYALPHA=!1;a.UV1=!1;a.UV2=!1;a.INSTANCES=!1;a.THIN_INSTANCES=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,a,b)||this;a.mainColor=r.a.Black();a.lineColor=r.a.Teal();a.gridRatio=1;a.gridOffset=u.e.Zero();a.majorUnitFrequency=10;a.minorUnitVisibility=.33;a.opacity=1;a.preMultiplyAlpha=!1;a._gridControl=new u.f(a.gridRatio,
a.majorUnitFrequency,a.minorUnitVisibility,a.opacity);return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.opacity||this._opacityTexture&&this._opacityTexture.isReady()};b.prototype.needAlphaBlendingForMesh=function(a){return this.needAlphaBlending()};b.prototype.isReadyForSubMesh=function(a,b,g){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new Q);var c=b._materialDefines,f=this.getScene();if(this._isReadyForSubMesh(b))return!0;
c.TRANSPARENT!==1>this.opacity&&(c.TRANSPARENT=!c.TRANSPARENT,c.markAsUnprocessed());c.PREMULTIPLYALPHA!=this.preMultiplyAlpha&&(c.PREMULTIPLYALPHA=!c.PREMULTIPLYALPHA,c.markAsUnprocessed());if(c._areTexturesDirty&&(c._needUVs=!1,f.texturesEnabled&&this._opacityTexture&&q.a.OpacityTextureEnabled))if(this._opacityTexture.isReady())c._needUVs=!0,c.OPACITY=!0;else return!1;h.a.PrepareDefinesForMisc(a,f,!1,!1,this.fogEnabled,!1,c);h.a.PrepareDefinesForFrameBoundValues(f,f.getEngine(),c,!!g);c.isDirty&&
(c.markAsProcessed(),f.resetCachedMaterial(),h.a.PrepareDefinesForAttributes(a,c,!1,!1),a=[n.b.PositionKind,n.b.NormalKind],c.UV1&&a.push(n.b.UVKind),c.UV2&&a.push(n.b.UV2Kind),c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess,h.a.PrepareAttributesForInstances(a,c),g=c.toString(),b.setEffect(f.getEngine().createEffect("grid",a,"projection mainColor lineColor gridControl gridOffset vFogInfos vFogColor world view opacityMatrix vOpacityInfos".split(" "),["opacitySampler"],
g,void 0,this.onCompiled,this.onError),c));if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,g){var c=this.getScene(),f=g._materialDefines;f&&(g=g.effect)&&(this._activeEffect=g,f.INSTANCES&&!f.THIN_INSTANCE||this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("view",c.getViewMatrix()),this._activeEffect.setMatrix("projection",c.getProjectionMatrix()),this._mustRebind(c,g)&&(this._activeEffect.setColor3("mainColor",
this.mainColor),this._activeEffect.setColor3("lineColor",this.lineColor),this._activeEffect.setVector3("gridOffset",this.gridOffset),this._gridControl.x=this.gridRatio,this._gridControl.y=Math.round(this.majorUnitFrequency),this._gridControl.z=this.minorUnitVisibility,this._gridControl.w=this.opacity,this._activeEffect.setVector4("gridControl",this._gridControl),this._opacityTexture&&q.a.OpacityTextureEnabled&&(this._activeEffect.setTexture("opacitySampler",this._opacityTexture),this._activeEffect.setFloat2("vOpacityInfos",
this._opacityTexture.coordinatesIndex,this._opacityTexture.level),this._activeEffect.setMatrix("opacityMatrix",this._opacityTexture.getTextureMatrix()))),h.a.BindFogParameters(c,b,this._activeEffect),this._afterBind(b,this._activeEffect))};b.prototype.dispose=function(a){k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.GridMaterial";
return a};b.prototype.getClassName=function(){return"GridMaterial"};b.Parse=function(a,f,g){return d.a.Parse(function(){return new b(a.name,f)},a,f,g)};Object(e.b)([Object(d.e)()],b.prototype,"mainColor",void 0);Object(e.b)([Object(d.e)()],b.prototype,"lineColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"gridRatio",void 0);Object(e.b)([Object(d.e)()],b.prototype,"gridOffset",void 0);Object(e.b)([Object(d.c)()],b.prototype,"majorUnitFrequency",void 0);Object(e.b)([Object(d.c)()],b.prototype,
"minorUnitVisibility",void 0);Object(e.b)([Object(d.c)()],b.prototype,"opacity",void 0);Object(e.b)([Object(d.c)()],b.prototype,"preMultiplyAlpha",void 0);Object(e.b)([Object(d.m)("opacityTexture")],b.prototype,"_opacityTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"opacityTexture",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.GridMaterial"]=p;m.a.ShadersStore.lavaPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n\nuniform float time;\nuniform float speed;\nuniform float movingSpeed;\nuniform vec3 fogColor;\nuniform sampler2D noiseTexture;\nuniform float fogDensity;\n\nvarying float noise;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nfloat random( vec3 scale,float seed ){\nreturn fract( sin( dot( gl_FragCoord.xyz+seed,scale ) )*43758.5453+seed ) ;\n}\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\n\nvec4 noiseTex=texture2D( noiseTexture,vDiffuseUV );\nvec2 T1=vDiffuseUV+vec2( 1.5,-1.5 )*time*0.02;\nvec2 T2=vDiffuseUV+vec2( -0.5,2.0 )*time*0.01*speed;\nT1.x+=noiseTex.x*2.0;\nT1.y+=noiseTex.y*2.0;\nT2.x-=noiseTex.y*0.2+time*0.001*movingSpeed;\nT2.y+=noiseTex.z*0.2+time*0.002*movingSpeed;\nfloat p=texture2D( noiseTexture,T1*3.0 ).a;\nvec4 lavaColor=texture2D( diffuseSampler,T2*4.0);\nvec4 temp=lavaColor*( vec4( p,p,p,p )*2. )+( lavaColor*lavaColor-0.1 );\nbaseColor=temp;\nfloat depth=gl_FragCoord.z*4.0;\nconst float LOG2=1.442695;\nfloat fogFactor=exp2(-fogDensity*fogDensity*depth*depth*LOG2 );\nfogFactor=1.0-clamp( fogFactor,0.0,1.0 );\nbaseColor=mix( baseColor,vec4( fogColor,baseColor.w ),fogFactor );\ndiffuseColor=baseColor.rgb;\n\n\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef UNLIT\nvec3 diffuseBase=vec3(1.,1.,1.);\n#else\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\n#endif\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}";
m.a.ShadersStore.lavaVertexShader="precision highp float;\n\nuniform float time;\nuniform float lowFrequencySpeed;\n\nvarying float noise;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n\n\nvec3 mod289(vec3 x)\n{\nreturn x-floor(x*(1.0/289.0))*289.0;\n}\nvec4 mod289(vec4 x)\n{\nreturn x-floor(x*(1.0/289.0))*289.0;\n}\nvec4 permute(vec4 x)\n{\nreturn mod289(((x*34.0)+1.0)*x);\n}\nvec4 taylorInvSqrt(vec4 r)\n{\nreturn 1.79284291400159-0.85373472095314*r;\n}\nvec3 fade(vec3 t) {\nreturn t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat pnoise(vec3 P,vec3 rep)\n{\nvec3 Pi0=mod(floor(P),rep);\nvec3 Pi1=mod(Pi0+vec3(1.0),rep);\nPi0=mod289(Pi0);\nPi1=mod289(Pi1);\nvec3 Pf0=fract(P);\nvec3 Pf1=Pf0-vec3(1.0);\nvec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);\nvec4 iy=vec4(Pi0.yy,Pi1.yy);\nvec4 iz0=Pi0.zzzz;\nvec4 iz1=Pi1.zzzz;\nvec4 ixy=permute(permute(ix)+iy);\nvec4 ixy0=permute(ixy+iz0);\nvec4 ixy1=permute(ixy+iz1);\nvec4 gx0=ixy0*(1.0/7.0);\nvec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;\ngx0=fract(gx0);\nvec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);\nvec4 sz0=step(gz0,vec4(0.0));\ngx0-=sz0*(step(0.0,gx0)-0.5);\ngy0-=sz0*(step(0.0,gy0)-0.5);\nvec4 gx1=ixy1*(1.0/7.0);\nvec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;\ngx1=fract(gx1);\nvec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);\nvec4 sz1=step(gz1,vec4(0.0));\ngx1-=sz1*(step(0.0,gx1)-0.5);\ngy1-=sz1*(step(0.0,gy1)-0.5);\nvec3 g000=vec3(gx0.x,gy0.x,gz0.x);\nvec3 g100=vec3(gx0.y,gy0.y,gz0.y);\nvec3 g010=vec3(gx0.z,gy0.z,gz0.z);\nvec3 g110=vec3(gx0.w,gy0.w,gz0.w);\nvec3 g001=vec3(gx1.x,gy1.x,gz1.x);\nvec3 g101=vec3(gx1.y,gy1.y,gz1.y);\nvec3 g011=vec3(gx1.z,gy1.z,gz1.z);\nvec3 g111=vec3(gx1.w,gy1.w,gz1.w);\nvec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));\ng000*=norm0.x;\ng010*=norm0.y;\ng100*=norm0.z;\ng110*=norm0.w;\nvec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));\ng001*=norm1.x;\ng011*=norm1.y;\ng101*=norm1.z;\ng111*=norm1.w;\nfloat n000=dot(g000,Pf0);\nfloat n100=dot(g100,vec3(Pf1.x,Pf0.yz));\nfloat n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));\nfloat n110=dot(g110,vec3(Pf1.xy,Pf0.z));\nfloat n001=dot(g001,vec3(Pf0.xy,Pf1.z));\nfloat n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));\nfloat n011=dot(g011,vec3(Pf0.x,Pf1.yz));\nfloat n111=dot(g111,Pf1);\nvec3 fade_xyz=fade(Pf0);\nvec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);\nvec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);\nfloat n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);\nreturn 2.2*n_xyz;\n}\n\nfloat turbulence( vec3 p ) {\nfloat w=100.0;\nfloat t=-.5;\nfor (float f=1.0 ; f<=10.0 ; f++ ){\nfloat power=pow( 2.0,f );\nt+=abs( pnoise( vec3( power*p ),vec3( 10.0,10.0,10.0 ) )/power );\n}\nreturn t;\n}\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\n#ifdef NORMAL\n\nnoise=10.0*-.10*turbulence( .5*normal+time*1.15 );\n\nfloat b=lowFrequencySpeed*5.0*pnoise( 0.05*position +vec3(time*1.025),vec3( 100.0 ) );\n\nfloat displacement =-1.5*noise+b;\n\nvec3 newPosition=position+normal*displacement;\ngl_Position=viewProjection*finalWorld*vec4( newPosition,1.0 );\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\nvPositionW=vec3(worldPos);\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}";
var R=function(d){function b(){var a=d.call(this)||this;a.DIFFUSE=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.LIGHT0=!1;a.LIGHT1=!1;a.LIGHT2=!1;a.LIGHT3=!1;a.SPOTLIGHT0=!1;a.SPOTLIGHT1=!1;a.SPOTLIGHT2=!1;a.SPOTLIGHT3=!1;a.HEMILIGHT0=!1;a.HEMILIGHT1=!1;a.HEMILIGHT2=!1;a.HEMILIGHT3=!1;a.DIRLIGHT0=!1;a.DIRLIGHT1=!1;a.DIRLIGHT2=!1;a.DIRLIGHT3=!1;a.POINTLIGHT0=!1;a.POINTLIGHT1=!1;a.POINTLIGHT2=
!1;a.POINTLIGHT3=!1;a.SHADOW0=!1;a.SHADOW1=!1;a.SHADOW2=!1;a.SHADOW3=!1;a.SHADOWS=!1;a.SHADOWESM0=!1;a.SHADOWESM1=!1;a.SHADOWESM2=!1;a.SHADOWESM3=!1;a.SHADOWPOISSON0=!1;a.SHADOWPOISSON1=!1;a.SHADOWPOISSON2=!1;a.SHADOWPOISSON3=!1;a.SHADOWPCF0=!1;a.SHADOWPCF1=!1;a.SHADOWPCF2=!1;a.SHADOWPCF3=!1;a.SHADOWPCSS0=!1;a.SHADOWPCSS1=!1;a.SHADOWPCSS2=!1;a.SHADOWPCSS3=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.UNLIT=!1;a.IMAGEPROCESSINGPOSTPROCESS=
!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,a,b)||this;a.speed=1;a.movingSpeed=1;a.lowFrequencySpeed=1;a.fogDensity=.15;a._lastTime=0;a.diffuseColor=new r.a(1,1,1);a._disableLighting=!1;a._unlit=!1;a._maxSimultaneousLights=4;a._scaledDiffuse=new r.a;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=
function(a,b,g){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new R);var c=b._materialDefines,f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var d=f.getEngine();if(c._areTexturesDirty&&(c._needUVs=!1,f.texturesEnabled&&this._diffuseTexture&&q.a.DiffuseTextureEnabled))if(this._diffuseTexture.isReady())c._needUVs=!0,c.DIFFUSE=!0;else return!1;h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),
c);c._needNormals=!0;h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);h.a.PrepareDefinesForFrameBoundValues(f,d,c,g?!0:!1);h.a.PrepareDefinesForAttributes(a,c,!0,!0);if(c.isDirty){c.markAsProcessed();f.resetCachedMaterial();g=new y.a;c.FOG&&g.addFallback(1,"FOG");h.a.HandleFallbacksForShadows(c,g);0<c.NUM_BONE_INFLUENCERS&&g.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;var e=[n.b.PositionKind];c.NORMAL&&
e.push(n.b.NormalKind);c.UV1&&e.push(n.b.UVKind);c.UV2&&e.push(n.b.UV2Kind);c.VERTEXCOLOR&&e.push(n.b.ColorKind);h.a.PrepareAttributesForBones(e,a,c,g);h.a.PrepareAttributesForInstances(e,c);a=c.toString();var k="world view viewProjection vEyePosition vLightsType vDiffuseColor vFogInfos vFogColor pointSize vDiffuseInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 diffuseMatrix time speed movingSpeed fogColor fogDensity lowFrequencySpeed".split(" "),l=["diffuseSampler",
"noiseTexture"],m=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:this.maxSimultaneousLights});b.setEffect(f.getEngine().createEffect("lava",{attributes:e,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:g,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this.maxSimultaneousLights}},d),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=
!0};b.prototype.bindForSubMesh=function(a,b,g){var c=this.getScene(),f=g._materialDefines;f&&(g=g.effect)&&(this._activeEffect=g,f.UNLIT=this._unlit,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._mustRebind(c,g)&&(this.diffuseTexture&&q.a.DiffuseTextureEnabled&&(this._activeEffect.setTexture("diffuseSampler",this.diffuseTexture),this._activeEffect.setFloat2("vDiffuseInfos",this.diffuseTexture.coordinatesIndex,
this.diffuseTexture.level),this._activeEffect.setMatrix("diffuseMatrix",this.diffuseTexture.getTextureMatrix())),this.noiseTexture&&this._activeEffect.setTexture("noiseTexture",this.noiseTexture),h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(g,c)),this._activeEffect.setColor4("vDiffuseColor",this._scaledDiffuse,this.alpha*b.visibility),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,
f),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._lastTime+=c.getEngine().getDeltaTime(),this._activeEffect.setFloat("time",this._lastTime*this.speed/1E3),this.fogColor||(this.fogColor=r.a.Black()),this._activeEffect.setColor3("fogColor",this.fogColor),this._activeEffect.setFloat("fogDensity",this.fogDensity),this._activeEffect.setFloat("lowFrequencySpeed",this.lowFrequencySpeed),this._activeEffect.setFloat("movingSpeed",
this.movingSpeed),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=function(){var a=[];this.diffuseTexture&&this.diffuseTexture.animations&&0<this.diffuseTexture.animations.length&&a.push(this.diffuseTexture);this.noiseTexture&&this.noiseTexture.animations&&0<this.noiseTexture.animations.length&&a.push(this.noiseTexture);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._diffuseTexture&&a.push(this._diffuseTexture);return a};b.prototype.hasTexture=
function(a){return k.prototype.hasTexture.call(this,a)||this.diffuseTexture===a?!0:!1};b.prototype.dispose=function(a){this.diffuseTexture&&this.diffuseTexture.dispose();this.noiseTexture&&this.noiseTexture.dispose();k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.LavaMaterial";return a};b.prototype.getClassName=function(){return"LavaMaterial"};
b.Parse=function(a,f,g){return d.a.Parse(function(){return new b(a.name,f)},a,f,g)};Object(e.b)([Object(d.m)("diffuseTexture")],b.prototype,"_diffuseTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture",void 0);Object(e.b)([Object(d.m)()],b.prototype,"noiseTexture",void 0);Object(e.b)([Object(d.e)()],b.prototype,"fogColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"speed",void 0);Object(e.b)([Object(d.c)()],b.prototype,"movingSpeed",void 0);
Object(e.b)([Object(d.c)()],b.prototype,"lowFrequencySpeed",void 0);Object(e.b)([Object(d.c)()],b.prototype,"fogDensity",void 0);Object(e.b)([Object(d.e)()],b.prototype,"diffuseColor",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("unlit")],b.prototype,"_unlit",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,
"unlit",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.LavaMaterial"]=p;m.a.ShadersStore.mixPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform sampler2D mixMap1Sampler;\nuniform vec2 vTextureInfos;\n#ifdef MIXMAP2\nuniform sampler2D mixMap2Sampler;\n#endif\nuniform sampler2D diffuse1Sampler;\nuniform sampler2D diffuse2Sampler;\nuniform sampler2D diffuse3Sampler;\nuniform sampler2D diffuse4Sampler;\nuniform vec2 diffuse1Infos;\nuniform vec2 diffuse2Infos;\nuniform vec2 diffuse3Infos;\nuniform vec2 diffuse4Infos;\n#ifdef MIXMAP2\nuniform sampler2D diffuse5Sampler;\nuniform sampler2D diffuse6Sampler;\nuniform sampler2D diffuse7Sampler;\nuniform sampler2D diffuse8Sampler;\nuniform vec2 diffuse5Infos;\nuniform vec2 diffuse6Infos;\nuniform vec2 diffuse7Infos;\nuniform vec2 diffuse8Infos;\n#endif\n#endif\n\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 finalMixColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n#ifdef MIXMAP2\nvec4 mixColor2=vec4(1.,1.,1.,1.);\n#endif\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef DIFFUSE\nvec4 mixColor=texture2D(mixMap1Sampler,vTextureUV);\n#include<depthPrePass>\nmixColor.rgb*=vTextureInfos.y;\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\nvec4 diffuse4Color=texture2D(diffuse4Sampler,vTextureUV*diffuse4Infos);\ndiffuse1Color.rgb*=mixColor.r;\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,mixColor.g);\ndiffuse3Color.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,mixColor.b);\nfinalMixColor.rgb=mix(diffuse3Color.rgb,diffuse4Color.rgb,1.0-mixColor.a);\n#ifdef MIXMAP2\nmixColor=texture2D(mixMap2Sampler,vTextureUV);\nmixColor.rgb*=vTextureInfos.y;\nvec4 diffuse5Color=texture2D(diffuse5Sampler,vTextureUV*diffuse5Infos);\nvec4 diffuse6Color=texture2D(diffuse6Sampler,vTextureUV*diffuse6Infos);\nvec4 diffuse7Color=texture2D(diffuse7Sampler,vTextureUV*diffuse7Infos);\nvec4 diffuse8Color=texture2D(diffuse8Sampler,vTextureUV*diffuse8Infos);\ndiffuse5Color.rgb=mix(finalMixColor.rgb,diffuse5Color.rgb,mixColor.r);\ndiffuse6Color.rgb=mix(diffuse5Color.rgb,diffuse6Color.rgb,mixColor.g);\ndiffuse7Color.rgb=mix(diffuse6Color.rgb,diffuse7Color.rgb,mixColor.b);\nfinalMixColor.rgb=mix(diffuse7Color.rgb,diffuse8Color.rgb,1.0-mixColor.a);\n#endif\n#endif\n#ifdef VERTEXCOLOR\nfinalMixColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*finalMixColor.rgb,0.0,1.0);\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}\n";
m.a.ShadersStore.mixVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform mat4 textureMatrix;\nuniform vec2 vTextureInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vTextureInfos.x == 0.)\n{\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var S=function(d){function b(){var a=d.call(this)||this;a.DIFFUSE=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.SPECULARTERM=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.MIXMAP2=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,
a,b)||this;a.diffuseColor=new r.a(1,1,1);a.specularColor=new r.a(0,0,0);a.specularPower=64;a._disableLighting=!1;a._maxSimultaneousLights=4;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,g){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new S);var c=b._materialDefines,
f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var d=f.getEngine();if(f.texturesEnabled){if(!this._mixTexture1||!this._mixTexture1.isReady())return!1;c._needUVs=!0;if(q.a.DiffuseTextureEnabled){if(!this._diffuseTexture1||!this._diffuseTexture1.isReady())return!1;c.DIFFUSE=!0;if(!(this._diffuseTexture2&&this._diffuseTexture2.isReady()&&this._diffuseTexture3&&this._diffuseTexture3.isReady()&&this._diffuseTexture4&&this._diffuseTexture4.isReady()))return!1;if(this._mixTexture2){if(!this._mixTexture2.isReady())return!1;
c.MIXMAP2=!0;if(!(this._diffuseTexture5&&this._diffuseTexture5.isReady()&&this._diffuseTexture6&&this._diffuseTexture6.isReady()&&this._diffuseTexture7&&this._diffuseTexture7.isReady()&&this._diffuseTexture8&&this._diffuseTexture8.isReady()))return!1}}}h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);c._needNormals=h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);h.a.PrepareDefinesForFrameBoundValues(f,d,c,g?
!0:!1);h.a.PrepareDefinesForAttributes(a,c,!0,!0);if(c.isDirty){c.markAsProcessed();f.resetCachedMaterial();g=new y.a;c.FOG&&g.addFallback(1,"FOG");h.a.HandleFallbacksForShadows(c,g,this.maxSimultaneousLights);0<c.NUM_BONE_INFLUENCERS&&g.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;var e=[n.b.PositionKind];c.NORMAL&&e.push(n.b.NormalKind);c.UV1&&e.push(n.b.UVKind);c.UV2&&e.push(n.b.UV2Kind);c.VERTEXCOLOR&&e.push(n.b.ColorKind);h.a.PrepareAttributesForBones(e,
a,c,g);h.a.PrepareAttributesForInstances(e,c);a=c.toString();var k="world view viewProjection vEyePosition vLightsType vDiffuseColor vSpecularColor vFogInfos vFogColor pointSize vTextureInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 textureMatrix diffuse1Infos diffuse2Infos diffuse3Infos diffuse4Infos diffuse5Infos diffuse6Infos diffuse7Infos diffuse8Infos".split(" "),l="mixMap1Sampler mixMap2Sampler diffuse1Sampler diffuse2Sampler diffuse3Sampler diffuse4Sampler diffuse5Sampler diffuse6Sampler diffuse7Sampler diffuse8Sampler".split(" "),
m=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:this.maxSimultaneousLights});b.setEffect(f.getEngine().createEffect("mix",{attributes:e,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:g,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this.maxSimultaneousLights}},d),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=
!0};b.prototype.bindForSubMesh=function(a,b,g){var c=this.getScene(),f=g._materialDefines;f&&(g=g.effect)&&(this._activeEffect=g,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._mustRebind(c,g)&&(this._mixTexture1&&(this._activeEffect.setTexture("mixMap1Sampler",this._mixTexture1),this._activeEffect.setFloat2("vTextureInfos",this._mixTexture1.coordinatesIndex,this._mixTexture1.level),this._activeEffect.setMatrix("textureMatrix",
this._mixTexture1.getTextureMatrix()),q.a.DiffuseTextureEnabled&&(this._diffuseTexture1&&(this._activeEffect.setTexture("diffuse1Sampler",this._diffuseTexture1),this._activeEffect.setFloat2("diffuse1Infos",this._diffuseTexture1.uScale,this._diffuseTexture1.vScale)),this._diffuseTexture2&&(this._activeEffect.setTexture("diffuse2Sampler",this._diffuseTexture2),this._activeEffect.setFloat2("diffuse2Infos",this._diffuseTexture2.uScale,this._diffuseTexture2.vScale)),this._diffuseTexture3&&(this._activeEffect.setTexture("diffuse3Sampler",
this._diffuseTexture3),this._activeEffect.setFloat2("diffuse3Infos",this._diffuseTexture3.uScale,this._diffuseTexture3.vScale)),this._diffuseTexture4&&(this._activeEffect.setTexture("diffuse4Sampler",this._diffuseTexture4),this._activeEffect.setFloat2("diffuse4Infos",this._diffuseTexture4.uScale,this._diffuseTexture4.vScale)))),this._mixTexture2&&(this._activeEffect.setTexture("mixMap2Sampler",this._mixTexture2),q.a.DiffuseTextureEnabled&&(this._diffuseTexture5&&(this._activeEffect.setTexture("diffuse5Sampler",
this._diffuseTexture5),this._activeEffect.setFloat2("diffuse5Infos",this._diffuseTexture5.uScale,this._diffuseTexture5.vScale)),this._diffuseTexture6&&(this._activeEffect.setTexture("diffuse6Sampler",this._diffuseTexture6),this._activeEffect.setFloat2("diffuse6Infos",this._diffuseTexture6.uScale,this._diffuseTexture6.vScale)),this._diffuseTexture7&&(this._activeEffect.setTexture("diffuse7Sampler",this._diffuseTexture7),this._activeEffect.setFloat2("diffuse7Infos",this._diffuseTexture7.uScale,this._diffuseTexture7.vScale)),
this._diffuseTexture8&&(this._activeEffect.setTexture("diffuse8Sampler",this._diffuseTexture8),this._activeEffect.setFloat2("diffuse8Infos",this._diffuseTexture8.uScale,this._diffuseTexture8.vScale)))),h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(g,c)),this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*b.visibility),f.SPECULARTERM&&this._activeEffect.setColor4("vSpecularColor",this.specularColor,
this.specularPower),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,f,this.maxSimultaneousLights),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=function(){var a=[];this._mixTexture1&&this._mixTexture1.animations&&0<this._mixTexture1.animations.length&&a.push(this._mixTexture1);this._mixTexture2&&
this._mixTexture2.animations&&0<this._mixTexture2.animations.length&&a.push(this._mixTexture2);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._mixTexture1&&a.push(this._mixTexture1);this._diffuseTexture1&&a.push(this._diffuseTexture1);this._diffuseTexture2&&a.push(this._diffuseTexture2);this._diffuseTexture3&&a.push(this._diffuseTexture3);this._diffuseTexture4&&a.push(this._diffuseTexture4);this._mixTexture2&&a.push(this._mixTexture2);this._diffuseTexture5&&
a.push(this._diffuseTexture5);this._diffuseTexture6&&a.push(this._diffuseTexture6);this._diffuseTexture7&&a.push(this._diffuseTexture7);this._diffuseTexture8&&a.push(this._diffuseTexture8);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)||this._mixTexture1===a||this._diffuseTexture1===a||this._diffuseTexture2===a||this._diffuseTexture3===a||this._diffuseTexture4===a||this._mixTexture2===a||this._diffuseTexture5===a||this._diffuseTexture6===a||this._diffuseTexture7===
a||this._diffuseTexture8===a?!0:!1};b.prototype.dispose=function(a){this._mixTexture1&&this._mixTexture1.dispose();k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.MixMaterial";return a};b.prototype.getClassName=function(){return"MixMaterial"};b.Parse=function(a,f,g){return d.a.Parse(function(){return new b(a.name,f)},a,f,g)};Object(e.b)([Object(d.m)("mixTexture1")],
b.prototype,"_mixTexture1",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"mixTexture1",void 0);Object(e.b)([Object(d.m)("mixTexture2")],b.prototype,"_mixTexture2",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"mixTexture2",void 0);Object(e.b)([Object(d.m)("diffuseTexture1")],b.prototype,"_diffuseTexture1",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture1",void 0);Object(e.b)([Object(d.m)("diffuseTexture2")],
b.prototype,"_diffuseTexture2",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture2",void 0);Object(e.b)([Object(d.m)("diffuseTexture3")],b.prototype,"_diffuseTexture3",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture3",void 0);Object(e.b)([Object(d.m)("diffuseTexture4")],b.prototype,"_diffuseTexture4",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture4",void 0);
Object(e.b)([Object(d.m)("diffuseTexture1")],b.prototype,"_diffuseTexture5",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture5",void 0);Object(e.b)([Object(d.m)("diffuseTexture2")],b.prototype,"_diffuseTexture6",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture6",void 0);Object(e.b)([Object(d.m)("diffuseTexture3")],b.prototype,"_diffuseTexture7",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],
b.prototype,"diffuseTexture7",void 0);Object(e.b)([Object(d.m)("diffuseTexture4")],b.prototype,"_diffuseTexture8",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture8",void 0);Object(e.b)([Object(d.e)()],b.prototype,"diffuseColor",void 0);Object(e.b)([Object(d.e)()],b.prototype,"specularColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"specularPower",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],
b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.MixMaterial"]=p;m.a.ShadersStore.normalPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef LIGHTING\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#endif\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef NORMAL\nbaseColor=mix(baseColor,vec4(vNormalW,1.0),0.5);\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\n#ifdef LIGHTING\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n#else\nvec3 finalDiffuse=baseColor.rgb;\n#endif\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}";
m.a.ShadersStore.normalVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var T=function(d){function b(){var a=d.call(this)||this;a.DIFFUSE=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.LIGHT0=!1;a.LIGHT1=!1;a.LIGHT2=!1;a.LIGHT3=!1;a.SPOTLIGHT0=!1;a.SPOTLIGHT1=!1;a.SPOTLIGHT2=!1;a.SPOTLIGHT3=!1;a.HEMILIGHT0=!1;a.HEMILIGHT1=!1;a.HEMILIGHT2=!1;a.HEMILIGHT3=!1;a.DIRLIGHT0=!1;a.DIRLIGHT1=!1;a.DIRLIGHT2=!1;a.DIRLIGHT3=!1;a.POINTLIGHT0=!1;a.POINTLIGHT1=!1;a.POINTLIGHT2=
!1;a.POINTLIGHT3=!1;a.SHADOW0=!1;a.SHADOW1=!1;a.SHADOW2=!1;a.SHADOW3=!1;a.SHADOWS=!1;a.SHADOWESM0=!1;a.SHADOWESM1=!1;a.SHADOWESM2=!1;a.SHADOWESM3=!1;a.SHADOWPOISSON0=!1;a.SHADOWPOISSON1=!1;a.SHADOWPOISSON2=!1;a.SHADOWPOISSON3=!1;a.SHADOWPCF0=!1;a.SHADOWPCF1=!1;a.SHADOWPCF2=!1;a.SHADOWPCF3=!1;a.SHADOWPCSS0=!1;a.SHADOWPCSS1=!1;a.SHADOWPCSS2=!1;a.SHADOWPCSS3=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.LIGHTING=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();
return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,a,b)||this;a.diffuseColor=new r.a(1,1,1);a._disableLighting=!1;a._maxSimultaneousLights=4;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaBlendingForMesh=function(a){return this.needAlphaBlending()||1>a.visibility};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,
b,d){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new T);var c=b._materialDefines,f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var e=f.getEngine();if(c._areTexturesDirty&&(c._needUVs=!1,f.texturesEnabled&&this._diffuseTexture&&q.a.DiffuseTextureEnabled))if(this._diffuseTexture.isReady())c._needUVs=!0,c.DIFFUSE=!0;else return!1;h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);
c._needNormals=!0;h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);h.a.PrepareDefinesForFrameBoundValues(f,e,c,d?!0:!1);c.LIGHTING=!this._disableLighting;h.a.PrepareDefinesForAttributes(a,c,!0,!0);if(c.isDirty){c.markAsProcessed();f.resetCachedMaterial();d=new y.a;c.FOG&&d.addFallback(1,"FOG");h.a.HandleFallbacksForShadows(c,d);0<c.NUM_BONE_INFLUENCERS&&d.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;
var g=[n.b.PositionKind];c.NORMAL&&g.push(n.b.NormalKind);c.UV1&&g.push(n.b.UVKind);c.UV2&&g.push(n.b.UV2Kind);h.a.PrepareAttributesForBones(g,a,c,d);h.a.PrepareAttributesForInstances(g,c);a=c.toString();var k="world view viewProjection vEyePosition vLightsType vDiffuseColor vFogInfos vFogColor pointSize vDiffuseInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 diffuseMatrix".split(" "),l=["diffuseSampler"],m=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,
uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:4});b.setEffect(f.getEngine().createEffect("normal",{attributes:g,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:d,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:4}},e),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,d){var c=this.getScene(),f=d._materialDefines;f&&(d=
d.effect)&&(this._activeEffect=d,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._mustRebind(c,d)&&(this.diffuseTexture&&q.a.DiffuseTextureEnabled&&(this._activeEffect.setTexture("diffuseSampler",this.diffuseTexture),this._activeEffect.setFloat2("vDiffuseInfos",this.diffuseTexture.coordinatesIndex,this.diffuseTexture.level),this._activeEffect.setMatrix("diffuseMatrix",this.diffuseTexture.getTextureMatrix())),
h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(d,c)),this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*b.visibility),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,f),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._afterBind(b,this._activeEffect))};
b.prototype.getAnimatables=function(){var a=[];this.diffuseTexture&&this.diffuseTexture.animations&&0<this.diffuseTexture.animations.length&&a.push(this.diffuseTexture);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._diffuseTexture&&a.push(this._diffuseTexture);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)||this.diffuseTexture===a?!0:!1};b.prototype.dispose=function(a){this.diffuseTexture&&this.diffuseTexture.dispose();
k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.NormalMaterial";return a};b.prototype.getClassName=function(){return"NormalMaterial"};b.Parse=function(a,f,e){return d.a.Parse(function(){return new b(a.name,f)},a,f,e)};Object(e.b)([Object(d.m)("diffuseTexture")],b.prototype,"_diffuseTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],
b.prototype,"diffuseTexture",void 0);Object(e.b)([Object(d.e)()],b.prototype,"diffuseColor",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.NormalMaterial"]=
p;m.a.ShadersStore.shadowOnlyPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform float alpha;\nuniform vec3 shadowColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0..1]\n\nvec4 color=vec4(shadowColor,(1.0-clamp(shadow,0.,1.))*alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}";
m.a.ShadersStore.shadowOnlyVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var U=function(d){function b(){var a=d.call(this)||this;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.POINTSIZE=!1;a.FOG=!1;a.NORMAL=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a),E=function(k){function b(a,b){a=k.call(this,a,b)||this;a._needAlphaBlending=!0;a.shadowColor=r.a.Black();return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return this._needAlphaBlending};
b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};Object.defineProperty(b.prototype,"activeLight",{get:function(){return this._activeLight},set:function(a){this._activeLight=a},enumerable:!1,configurable:!0});b.prototype._getFirstShadowLightForMesh=function(a){var b=0;for(a=a.lightSources;b<a.length;b++){var d=a[b];if(d.shadowEnabled)return d}return null};b.prototype.isReadyForSubMesh=function(a,b,d){var c;if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;
b._materialDefines||(b._materialDefines=new U);var f=b._materialDefines,e=this.getScene();if(this._isReadyForSubMesh(b))return!0;var g=e.getEngine();if(this._activeLight)for(var k=0,l=a.lightSources;k<l.length;k++){var m=l[k];if(m.shadowEnabled){if(this._activeLight===m)break;k=a.lightSources.indexOf(this._activeLight);-1!==k&&(a.lightSources.splice(k,1),a.lightSources.splice(0,0,this._activeLight));break}}h.a.PrepareDefinesForFrameBoundValues(e,g,f,d?!0:!1);h.a.PrepareDefinesForMisc(a,e,!1,this.pointsCloud,
this.fogEnabled,this._shouldTurnAlphaTestOn(a),f);f._needNormals=h.a.PrepareDefinesForLights(e,a,f,!1,1);d=null===(c=this._getFirstShadowLightForMesh(a))||void 0===c?void 0:c.getShadowGenerator();this._needAlphaBlending=!0;d&&d.getClassName&&"CascadedShadowGenerator"===d.getClassName()&&(this._needAlphaBlending=!d.autoCalcDepthBounds);h.a.PrepareDefinesForAttributes(a,f,!1,!0);f.isDirty&&(f.markAsProcessed(),e.resetCachedMaterial(),c=new y.a,f.FOG&&c.addFallback(1,"FOG"),h.a.HandleFallbacksForShadows(f,
c,1),0<f.NUM_BONE_INFLUENCERS&&c.addCPUSkinningFallback(0,a),f.IMAGEPROCESSINGPOSTPROCESS=e.imageProcessingConfiguration.applyByPostProcess,d=[n.b.PositionKind],f.NORMAL&&d.push(n.b.NormalKind),h.a.PrepareAttributesForBones(d,a,f,c),h.a.PrepareAttributesForInstances(d,f),a=f.toString(),k="world view viewProjection vEyePosition vLightsType vFogInfos vFogColor pointSize alpha shadowColor mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6".split(" "),l=[],m=[],h.a.PrepareUniformsAndSamplersList({uniformsNames:k,
uniformBuffersNames:m,samplers:l,defines:f,maxSimultaneousLights:1}),b.setEffect(e.getEngine().createEffect("shadowOnly",{attributes:d,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:c,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:1}},g),f));if(!b.effect||!b.effect.isReady())return!1;f._renderId=e.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,d){var c=this.getScene(),f=d._materialDefines;
f&&(d=d.effect)&&(this._activeEffect=d,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._mustRebind(c,d)&&(h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),this._activeEffect.setFloat("alpha",this.alpha),this._activeEffect.setColor3("shadowColor",this.shadowColor),h.a.BindEyePosition(d,c)),c.lightsEnabled&&(h.a.BindLights(c,b,this._activeEffect,
f,1),a=this._getFirstShadowLightForMesh(b))&&(a._renderId=-1),(c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE||f.SHADOWCSM0)&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._afterBind(b,this._activeEffect))};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.ShadowOnlyMaterial";return a};b.prototype.getClassName=
function(){return"ShadowOnlyMaterial"};b.Parse=function(a,f,e){return d.a.Parse(function(){return new b(a.name,f)},a,f,e)};return b}(w.a);t.a.RegisteredTypes["BABYLON.ShadowOnlyMaterial"]=E;m.a.ShadersStore.simplePixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}";
m.a.ShadersStore.simpleVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var V=function(d){function b(){var a=d.call(this)||this;a.DIFFUSE=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,a,b)||this;a.diffuseColor=new r.a(1,
1,1);a._disableLighting=!1;a._maxSimultaneousLights=4;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,d){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new V);var c=b._materialDefines,f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var e=f.getEngine();
if(c._areTexturesDirty&&(c._needUVs=!1,f.texturesEnabled&&this._diffuseTexture&&q.a.DiffuseTextureEnabled))if(this._diffuseTexture.isReady())c._needUVs=!0,c.DIFFUSE=!0;else return!1;h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);c._needNormals=h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);h.a.PrepareDefinesForFrameBoundValues(f,e,c,d?!0:!1);h.a.PrepareDefinesForAttributes(a,c,!0,!0);if(c.isDirty){c.markAsProcessed();
f.resetCachedMaterial();d=new y.a;c.FOG&&d.addFallback(1,"FOG");h.a.HandleFallbacksForShadows(c,d,this.maxSimultaneousLights);0<c.NUM_BONE_INFLUENCERS&&d.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;var g=[n.b.PositionKind];c.NORMAL&&g.push(n.b.NormalKind);c.UV1&&g.push(n.b.UVKind);c.UV2&&g.push(n.b.UV2Kind);c.VERTEXCOLOR&&g.push(n.b.ColorKind);h.a.PrepareAttributesForBones(g,a,c,d);h.a.PrepareAttributesForInstances(g,c);a=c.toString();
var k="world view viewProjection vEyePosition vLightsType vDiffuseColor vFogInfos vFogColor pointSize vDiffuseInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 diffuseMatrix".split(" "),l=["diffuseSampler"],m=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:this.maxSimultaneousLights});b.setEffect(f.getEngine().createEffect("simple",{attributes:g,uniformsNames:k,uniformBuffersNames:m,samplers:l,
defines:a,fallbacks:d,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this._maxSimultaneousLights-1}},e),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,d){var c=this.getScene(),f=d._materialDefines;f&&(d=d.effect)&&(this._activeEffect=d,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,
this._activeEffect),this._mustRebind(c,d)&&(this._diffuseTexture&&q.a.DiffuseTextureEnabled&&(this._activeEffect.setTexture("diffuseSampler",this._diffuseTexture),this._activeEffect.setFloat2("vDiffuseInfos",this._diffuseTexture.coordinatesIndex,this._diffuseTexture.level),this._activeEffect.setMatrix("diffuseMatrix",this._diffuseTexture.getTextureMatrix())),h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(d,c)),
this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*b.visibility),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,f,this.maxSimultaneousLights),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=function(){var a=[];this._diffuseTexture&&this._diffuseTexture.animations&&0<this._diffuseTexture.animations.length&&
a.push(this._diffuseTexture);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._diffuseTexture&&a.push(this._diffuseTexture);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)||this.diffuseTexture===a?!0:!1};b.prototype.dispose=function(a){this._diffuseTexture&&this._diffuseTexture.dispose();k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,
f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.SimpleMaterial";return a};b.prototype.getClassName=function(){return"SimpleMaterial"};b.Parse=function(a,f,e){return d.a.Parse(function(){return new b(a.name,f)},a,f,e)};Object(e.b)([Object(d.m)("diffuseTexture")],b.prototype,"_diffuseTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture",void 0);Object(e.b)([Object(d.e)("diffuse")],b.prototype,
"diffuseColor",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.SimpleMaterial"]=p;m.a.ShadersStore.skyPixelShader="precision highp float;\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\nuniform vec3 cameraPosition;\nuniform vec3 cameraOffset;\nuniform float luminance;\nuniform float turbidity;\nuniform float rayleigh;\nuniform float mieCoefficient;\nuniform float mieDirectionalG;\nuniform vec3 sunPosition;\n\n#include<fogFragmentDeclaration>\n\nconst float e=2.71828182845904523536028747135266249775724709369995957;\nconst float pi=3.141592653589793238462643383279502884197169;\nconst float n=1.0003;\nconst float N=2.545E25;\nconst float pn=0.035;\nconst vec3 lambda=vec3(680E-9,550E-9,450E-9);\nconst vec3 K=vec3(0.686,0.678,0.666);\nconst float v=4.0;\nconst float rayleighZenithLength=8.4E3;\nconst float mieZenithLength=1.25E3;\nconst vec3 up=vec3(0.0,1.0,0.0);\nconst float EE=1000.0;\nconst float sunAngularDiameterCos=0.999956676946448443553574619906976478926848692873900859324;\nconst float cutoffAngle=pi/1.95;\nconst float steepness=1.5;\nvec3 totalRayleigh(vec3 lambda)\n{\nreturn (8.0*pow(pi,3.0)*pow(pow(n,2.0)-1.0,2.0)*(6.0+3.0*pn))/(3.0*N*pow(lambda,vec3(4.0))*(6.0-7.0*pn));\n}\nvec3 simplifiedRayleigh()\n{\nreturn 0.0005/vec3(94,40,18);\n}\nfloat rayleighPhase(float cosTheta)\n{\nreturn (3.0/(16.0*pi))*(1.0+pow(cosTheta,2.0));\n}\nvec3 totalMie(vec3 lambda,vec3 K,float T)\n{\nfloat c=(0.2*T )*10E-18;\nreturn 0.434*c*pi*pow((2.0*pi)/lambda,vec3(v-2.0))*K;\n}\nfloat hgPhase(float cosTheta,float g)\n{\nreturn (1.0/(4.0*pi))*((1.0-pow(g,2.0))/pow(1.0-2.0*g*cosTheta+pow(g,2.0),1.5));\n}\nfloat sunIntensity(float zenithAngleCos)\n{\nreturn EE*max(0.0,1.0-exp((-(cutoffAngle-acos(zenithAngleCos))/steepness)));\n}\nfloat A=0.15;\nfloat B=0.50;\nfloat C=0.10;\nfloat D=0.20;\nfloat EEE=0.02;\nfloat F=0.30;\nfloat W=1000.0;\nvec3 Uncharted2Tonemap(vec3 x)\n{\nreturn ((x*(A*x+C*B)+D*EEE)/(x*(A*x+B)+D*F))-EEE/F;\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\n\nfloat sunfade=1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\nfloat rayleighCoefficient=rayleigh-(1.0*(1.0-sunfade));\nvec3 sunDirection=normalize(sunPosition);\nfloat sunE=sunIntensity(dot(sunDirection,up));\nvec3 betaR=simplifiedRayleigh()*rayleighCoefficient;\nvec3 betaM=totalMie(lambda,K,turbidity)*mieCoefficient;\nfloat zenithAngle=acos(max(0.0,dot(up,normalize(vPositionW-cameraPosition+cameraOffset))));\nfloat sR=rayleighZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\nfloat sM=mieZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\nvec3 Fex=exp(-(betaR*sR+betaM*sM));\nfloat cosTheta=dot(normalize(vPositionW-cameraPosition),sunDirection);\nfloat rPhase=rayleighPhase(cosTheta*0.5+0.5);\nvec3 betaRTheta=betaR*rPhase;\nfloat mPhase=hgPhase(cosTheta,mieDirectionalG);\nvec3 betaMTheta=betaM*mPhase;\nvec3 Lin=pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*(1.0-Fex),vec3(1.5));\nLin*=mix(vec3(1.0),pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up,sunDirection),5.0),0.0,1.0));\nvec3 direction=normalize(vPositionW-cameraPosition);\nfloat theta=acos(direction.y);\nfloat phi=atan(direction.z,direction.x);\nvec2 uv=vec2(phi,theta)/vec2(2.0*pi,pi)+vec2(0.5,0.0);\nvec3 L0=vec3(0.1)*Fex;\nfloat sundisk=smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\nL0+=(sunE*19000.0*Fex)*sundisk;\nvec3 whiteScale=1.0/Uncharted2Tonemap(vec3(W));\nvec3 texColor=(Lin+L0);\ntexColor*=0.04 ;\ntexColor+=vec3(0.0,0.001,0.0025)*0.3;\nfloat g_fMaxLuminance=1.0;\nfloat fLumScaled=0.1/luminance;\nfloat fLumCompressed=(fLumScaled*(1.0+(fLumScaled/(g_fMaxLuminance*g_fMaxLuminance))))/(1.0+fLumScaled);\nfloat ExposureBias=fLumCompressed;\nvec3 curr=Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\n\n\n\nvec3 retColor=curr*whiteScale;\n\n\nfloat alpha=1.0;\n#ifdef VERTEXCOLOR\nretColor.rgb*=vColor.rgb;\n#endif\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n\nvec4 color=clamp(vec4(retColor.rgb,alpha),0.0,1.0);\n\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}\n";
m.a.ShadersStore.skyVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n\nuniform mat4 world;\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\nvoid main(void) {\ngl_Position=viewProjection*world*vec4(position,1.0);\nvec4 worldPos=world*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var W=function(d){function b(){var a=d.call(this)||this;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.POINTSIZE=!1;a.FOG=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,a,b)||this;a.luminance=1;a.turbidity=10;a.rayleigh=2;a.mieCoefficient=.005;a.mieDirectionalG=.8;a.distance=500;a.inclination=.49;a.azimuth=.25;a.sunPosition=new u.e(0,
100,0);a.useSunPosition=!1;a.cameraOffset=u.e.Zero();a._cameraPosition=u.e.Zero();return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,d){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new W);d=b._materialDefines;var c=this.getScene();if(this._isReadyForSubMesh(b))return!0;
h.a.PrepareDefinesForMisc(a,c,!1,this.pointsCloud,this.fogEnabled,!1,d);h.a.PrepareDefinesForAttributes(a,d,!0,!1);if(d.isDirty){d.markAsProcessed();c.resetCachedMaterial();a=new y.a;d.FOG&&a.addFallback(1,"FOG");d.IMAGEPROCESSINGPOSTPROCESS=c.imageProcessingConfiguration.applyByPostProcess;var f=[n.b.PositionKind];d.VERTEXCOLOR&&f.push(n.b.ColorKind);var e=d.toString();b.setEffect(c.getEngine().createEffect("sky",f,"world viewProjection view vFogInfos vFogColor pointSize vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 luminance turbidity rayleigh mieCoefficient mieDirectionalG sunPosition cameraPosition cameraOffset".split(" "),
[],e,a,this.onCompiled,this.onError),d)}if(!b.effect||!b.effect.isReady())return!1;d._renderId=c.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,d){var c=this.getScene();if(d._materialDefines&&(d=d.effect)){this._activeEffect=d;this.bindOnlyWorldMatrix(a);this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix());this._mustRebind(c,d)&&(h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize));
c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix());h.a.BindFogParameters(c,b,this._activeEffect);if(a=c.activeCamera)a=a.getWorldMatrix(),this._cameraPosition.x=a.m[12],this._cameraPosition.y=a.m[13],this._cameraPosition.z=a.m[14],this._activeEffect.setVector3("cameraPosition",this._cameraPosition);this._activeEffect.setVector3("cameraOffset",this.cameraOffset);0<this.luminance&&this._activeEffect.setFloat("luminance",this.luminance);this._activeEffect.setFloat("turbidity",
this.turbidity);this._activeEffect.setFloat("rayleigh",this.rayleigh);this._activeEffect.setFloat("mieCoefficient",this.mieCoefficient);this._activeEffect.setFloat("mieDirectionalG",this.mieDirectionalG);this.useSunPosition||(a=Math.PI*(this.inclination-.5),c=2*Math.PI*(this.azimuth-.5),this.sunPosition.x=this.distance*Math.cos(c),this.sunPosition.y=this.distance*Math.sin(c)*Math.sin(a),this.sunPosition.z=this.distance*Math.sin(c)*Math.cos(a));this._activeEffect.setVector3("sunPosition",this.sunPosition);
this._afterBind(b,this._activeEffect)}};b.prototype.getAnimatables=function(){return[]};b.prototype.dispose=function(a){k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.SkyMaterial";return a};b.prototype.getClassName=function(){return"SkyMaterial"};b.Parse=function(a,f,e){return d.a.Parse(function(){return new b(a.name,f)},a,f,
e)};Object(e.b)([Object(d.c)()],b.prototype,"luminance",void 0);Object(e.b)([Object(d.c)()],b.prototype,"turbidity",void 0);Object(e.b)([Object(d.c)()],b.prototype,"rayleigh",void 0);Object(e.b)([Object(d.c)()],b.prototype,"mieCoefficient",void 0);Object(e.b)([Object(d.c)()],b.prototype,"mieDirectionalG",void 0);Object(e.b)([Object(d.c)()],b.prototype,"distance",void 0);Object(e.b)([Object(d.c)()],b.prototype,"inclination",void 0);Object(e.b)([Object(d.c)()],b.prototype,"azimuth",void 0);Object(e.b)([Object(d.o)()],
b.prototype,"sunPosition",void 0);Object(e.b)([Object(d.c)()],b.prototype,"useSunPosition",void 0);Object(e.b)([Object(d.c)()],b.prototype,"cameraOffset",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.SkyMaterial"]=p;m.a.ShadersStore.terrainPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform sampler2D textureSampler;\nuniform vec2 vTextureInfos;\nuniform sampler2D diffuse1Sampler;\nuniform sampler2D diffuse2Sampler;\nuniform sampler2D diffuse3Sampler;\nuniform vec2 diffuse1Infos;\nuniform vec2 diffuse2Infos;\nuniform vec2 diffuse3Infos;\n#endif\n#ifdef BUMP\nuniform sampler2D bump1Sampler;\nuniform sampler2D bump2Sampler;\nuniform sampler2D bump3Sampler;\n#endif\n\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\n\n#ifdef BUMP\n#extension GL_OES_standard_derivatives : enable\n\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv)\n{\n\nvec3 dp1=dFdx(p);\nvec3 dp2=dFdy(p);\nvec2 duv1=dFdx(uv);\nvec2 duv2=dFdy(uv);\n\nvec3 dp2perp=cross(dp2,normal);\nvec3 dp1perp=cross(normal,dp1);\nvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\nvec3 binormal=dp2perp*duv1.y+dp1perp*duv2.y;\n\nfloat invmax=inversesqrt(max(dot(tangent,tangent),dot(binormal,binormal)));\nreturn mat3(tangent*invmax,binormal*invmax,normal);\n}\nvec3 perturbNormal(vec3 viewDir,vec3 mixColor)\n{\nvec3 bump1Color=texture2D(bump1Sampler,vTextureUV*diffuse1Infos).xyz;\nvec3 bump2Color=texture2D(bump2Sampler,vTextureUV*diffuse2Infos).xyz;\nvec3 bump3Color=texture2D(bump3Sampler,vTextureUV*diffuse3Infos).xyz;\nbump1Color.rgb*=mixColor.r;\nbump2Color.rgb=mix(bump1Color.rgb,bump2Color.rgb,mixColor.g);\nvec3 map=mix(bump2Color.rgb,bump3Color.rgb,mixColor.b);\nmap=map*255./127.-128./127.;\nmat3 TBN=cotangent_frame(vNormalW*vTextureInfos.y,-viewDir,vTextureUV);\nreturn normalize(TBN*map);\n}\n#endif\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef DIFFUSE\nbaseColor=texture2D(textureSampler,vTextureUV);\n#if defined(BUMP) && defined(DIFFUSE)\nnormalW=perturbNormal(viewDirectionW,baseColor.rgb);\n#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vTextureInfos.y;\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\ndiffuse1Color.rgb*=baseColor.r;\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,baseColor.g);\nbaseColor.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,baseColor.b);\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*baseColor.rgb,0.0,1.0);\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}\n";
m.a.ShadersStore.terrainVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform mat4 textureMatrix;\nuniform vec2 vTextureInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vTextureInfos.x == 0.)\n{\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var X=function(d){function b(){var a=d.call(this)||this;a.DIFFUSE=!1;a.BUMP=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.SPECULARTERM=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,b){a=k.call(this,a,
b)||this;a.diffuseColor=new r.a(1,1,1);a.specularColor=new r.a(0,0,0);a.specularPower=64;a._disableLighting=!1;a._maxSimultaneousLights=4;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,d){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new X);var c=b._materialDefines,
f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var e=f.getEngine();if(f.texturesEnabled){if(!this.mixTexture||!this.mixTexture.isReady())return!1;c._needUVs=!0;if(q.a.DiffuseTextureEnabled){if(!(this.diffuseTexture1&&this.diffuseTexture1.isReady()&&this.diffuseTexture2&&this.diffuseTexture2.isReady()&&this.diffuseTexture3&&this.diffuseTexture3.isReady()))return!1;c.DIFFUSE=!0}if(this.bumpTexture1&&this.bumpTexture2&&this.bumpTexture3&&q.a.BumpTextureEnabled){if(!this.bumpTexture1.isReady()||
!this.bumpTexture2.isReady()||!this.bumpTexture3.isReady())return!1;c._needNormals=!0;c.BUMP=!0}}h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);c._needNormals=h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);h.a.PrepareDefinesForFrameBoundValues(f,e,c,d?!0:!1);h.a.PrepareDefinesForAttributes(a,c,!0,!0);if(c.isDirty){c.markAsProcessed();f.resetCachedMaterial();d=new y.a;c.FOG&&d.addFallback(1,"FOG");h.a.HandleFallbacksForShadows(c,
d,this.maxSimultaneousLights);0<c.NUM_BONE_INFLUENCERS&&d.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;var g=[n.b.PositionKind];c.NORMAL&&g.push(n.b.NormalKind);c.UV1&&g.push(n.b.UVKind);c.UV2&&g.push(n.b.UV2Kind);c.VERTEXCOLOR&&g.push(n.b.ColorKind);h.a.PrepareAttributesForBones(g,a,c,d);h.a.PrepareAttributesForInstances(g,c);a=c.toString();var k="world view viewProjection vEyePosition vLightsType vDiffuseColor vSpecularColor vFogInfos vFogColor pointSize vTextureInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 textureMatrix diffuse1Infos diffuse2Infos diffuse3Infos".split(" "),
l="textureSampler diffuse1Sampler diffuse2Sampler diffuse3Sampler bump1Sampler bump2Sampler bump3Sampler".split(" "),m=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:this.maxSimultaneousLights});b.setEffect(f.getEngine().createEffect("terrain",{attributes:g,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:d,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this.maxSimultaneousLights}},
e),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,d){var c=this.getScene(),f=d._materialDefines;f&&(d=d.effect)&&(this._activeEffect=d,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._mustRebind(c,d)&&(this.mixTexture&&(this._activeEffect.setTexture("textureSampler",this._mixTexture),this._activeEffect.setFloat2("vTextureInfos",
this._mixTexture.coordinatesIndex,this._mixTexture.level),this._activeEffect.setMatrix("textureMatrix",this._mixTexture.getTextureMatrix()),q.a.DiffuseTextureEnabled&&(this._diffuseTexture1&&(this._activeEffect.setTexture("diffuse1Sampler",this._diffuseTexture1),this._activeEffect.setFloat2("diffuse1Infos",this._diffuseTexture1.uScale,this._diffuseTexture1.vScale)),this._diffuseTexture2&&(this._activeEffect.setTexture("diffuse2Sampler",this._diffuseTexture2),this._activeEffect.setFloat2("diffuse2Infos",
this._diffuseTexture2.uScale,this._diffuseTexture2.vScale)),this._diffuseTexture3&&(this._activeEffect.setTexture("diffuse3Sampler",this._diffuseTexture3),this._activeEffect.setFloat2("diffuse3Infos",this._diffuseTexture3.uScale,this._diffuseTexture3.vScale))),q.a.BumpTextureEnabled&&c.getEngine().getCaps().standardDerivatives&&(this._bumpTexture1&&this._activeEffect.setTexture("bump1Sampler",this._bumpTexture1),this._bumpTexture2&&this._activeEffect.setTexture("bump2Sampler",this._bumpTexture2),
this._bumpTexture3&&this._activeEffect.setTexture("bump3Sampler",this._bumpTexture3))),h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(d,c)),this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*b.visibility),f.SPECULARTERM&&this._activeEffect.setColor4("vSpecularColor",this.specularColor,this.specularPower),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,f,this.maxSimultaneousLights),
c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=function(){var a=[];this.mixTexture&&this.mixTexture.animations&&0<this.mixTexture.animations.length&&a.push(this.mixTexture);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._mixTexture&&a.push(this._mixTexture);this._diffuseTexture1&&
a.push(this._diffuseTexture1);this._diffuseTexture2&&a.push(this._diffuseTexture2);this._diffuseTexture3&&a.push(this._diffuseTexture3);this._bumpTexture1&&a.push(this._bumpTexture1);this._bumpTexture2&&a.push(this._bumpTexture2);this._bumpTexture3&&a.push(this._bumpTexture3);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)||this._mixTexture===a||this._diffuseTexture1===a||this._diffuseTexture2===a||this._diffuseTexture3===a||this._bumpTexture1===a||this._bumpTexture2===
a||this._bumpTexture3===a?!0:!1};b.prototype.dispose=function(a){this.mixTexture&&this.mixTexture.dispose();k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.TerrainMaterial";return a};b.prototype.getClassName=function(){return"TerrainMaterial"};b.Parse=function(a,f,e){return d.a.Parse(function(){return new b(a.name,f)},a,f,e)};
Object(e.b)([Object(d.m)("mixTexture")],b.prototype,"_mixTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"mixTexture",void 0);Object(e.b)([Object(d.m)("diffuseTexture1")],b.prototype,"_diffuseTexture1",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture1",void 0);Object(e.b)([Object(d.m)("diffuseTexture2")],b.prototype,"_diffuseTexture2",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,
"diffuseTexture2",void 0);Object(e.b)([Object(d.m)("diffuseTexture3")],b.prototype,"_diffuseTexture3",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTexture3",void 0);Object(e.b)([Object(d.m)("bumpTexture1")],b.prototype,"_bumpTexture1",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"bumpTexture1",void 0);Object(e.b)([Object(d.m)("bumpTexture2")],b.prototype,"_bumpTexture2",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],
b.prototype,"bumpTexture2",void 0);Object(e.b)([Object(d.m)("bumpTexture3")],b.prototype,"_bumpTexture3",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"bumpTexture3",void 0);Object(e.b)([Object(d.e)()],b.prototype,"diffuseColor",void 0);Object(e.b)([Object(d.e)()],b.prototype,"specularColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"specularPower",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],
b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.TerrainMaterial"]=p;m.a.ShadersStore.triplanarPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSEX\nvarying vec2 vTextureUVX;\nuniform sampler2D diffuseSamplerX;\n#ifdef BUMPX\nuniform sampler2D normalSamplerX;\n#endif\n#endif\n#ifdef DIFFUSEY\nvarying vec2 vTextureUVY;\nuniform sampler2D diffuseSamplerY;\n#ifdef BUMPY\nuniform sampler2D normalSamplerY;\n#endif\n#endif\n#ifdef DIFFUSEZ\nvarying vec2 vTextureUVZ;\nuniform sampler2D diffuseSamplerZ;\n#ifdef BUMPZ\nuniform sampler2D normalSamplerZ;\n#endif\n#endif\n#ifdef NORMAL\nvarying mat3 tangentSpace;\n#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(0.,0.,0.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=tangentSpace[2];\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\nvec4 baseNormal=vec4(0.0,0.0,0.0,1.0);\nnormalW*=normalW;\n#ifdef DIFFUSEX\nbaseColor+=texture2D(diffuseSamplerX,vTextureUVX)*normalW.x;\n#ifdef BUMPX\nbaseNormal+=texture2D(normalSamplerX,vTextureUVX)*normalW.x;\n#endif\n#endif\n#ifdef DIFFUSEY\nbaseColor+=texture2D(diffuseSamplerY,vTextureUVY)*normalW.y;\n#ifdef BUMPY\nbaseNormal+=texture2D(normalSamplerY,vTextureUVY)*normalW.y;\n#endif\n#endif\n#ifdef DIFFUSEZ\nbaseColor+=texture2D(diffuseSamplerZ,vTextureUVZ)*normalW.z;\n#ifdef BUMPZ\nbaseNormal+=texture2D(normalSamplerZ,vTextureUVZ)*normalW.z;\n#endif\n#endif\n#ifdef NORMAL\nnormalW=normalize((2.0*baseNormal.xyz-1.0)*tangentSpace);\n#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n#include<imageProcessingCompatibility>\n}\n";
m.a.ShadersStore.triplanarVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSEX\nvarying vec2 vTextureUVX;\n#endif\n#ifdef DIFFUSEY\nvarying vec2 vTextureUVY;\n#endif\n#ifdef DIFFUSEZ\nvarying vec2 vTextureUVZ;\n#endif\nuniform float tileSize;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying mat3 tangentSpace;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void)\n{\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\ngl_Position=viewProjection*worldPos;\nvPositionW=vec3(worldPos);\n#ifdef DIFFUSEX\nvTextureUVX=worldPos.zy/tileSize;\n#endif\n#ifdef DIFFUSEY\nvTextureUVY=worldPos.xz/tileSize;\n#endif\n#ifdef DIFFUSEZ\nvTextureUVZ=worldPos.xy/tileSize;\n#endif\n#ifdef NORMAL\n\nvec3 xtan=vec3(0,0,1);\nvec3 xbin=vec3(0,1,0);\nvec3 ytan=vec3(1,0,0);\nvec3 ybin=vec3(0,0,1);\nvec3 ztan=vec3(1,0,0);\nvec3 zbin=vec3(0,1,0);\nvec3 normalizedNormal=normalize(normal);\nnormalizedNormal*=normalizedNormal;\nvec3 worldBinormal=normalize(xbin*normalizedNormal.x+ybin*normalizedNormal.y+zbin*normalizedNormal.z);\nvec3 worldTangent=normalize(xtan*normalizedNormal.x+ytan*normalizedNormal.y+ztan*normalizedNormal.z);\nworldTangent=(world*vec4(worldTangent,1.0)).xyz;\nworldBinormal=(world*vec4(worldBinormal,1.0)).xyz;\nvec3 worldNormal=(world*vec4(normalize(normal),1.0)).xyz;\ntangentSpace[0]=worldTangent;\ntangentSpace[1]=worldBinormal;\ntangentSpace[2]=worldNormal;\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n";
var Y=function(d){function b(){var a=d.call(this)||this;a.DIFFUSEX=!1;a.DIFFUSEY=!1;a.DIFFUSEZ=!1;a.BUMPX=!1;a.BUMPY=!1;a.BUMPZ=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.SPECULARTERM=!1;a.NORMAL=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);p=function(k){function b(a,
b){a=k.call(this,a,b)||this;a.tileSize=1;a.diffuseColor=new r.a(1,1,1);a.specularColor=new r.a(.2,.2,.2);a.specularPower=64;a._disableLighting=!1;a._maxSimultaneousLights=4;return a}Object(e.c)(b,k);b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,d){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=
new Y);var c=b._materialDefines,f=this.getScene();if(this._isReadyForSubMesh(b))return!0;var e=f.getEngine();if(c._areTexturesDirty&&f.texturesEnabled){if(q.a.DiffuseTextureEnabled)for(var g=[this.diffuseTextureX,this.diffuseTextureY,this.diffuseTextureZ],k=["DIFFUSEX","DIFFUSEY","DIFFUSEZ"],l=0;l<g.length;l++)if(g[l])if(g[l].isReady())c[k[l]]=!0;else return!1;if(q.a.BumpTextureEnabled)for(g=[this.normalTextureX,this.normalTextureY,this.normalTextureZ],k=["BUMPX","BUMPY","BUMPZ"],l=0;l<g.length;l++)if(g[l])if(g[l].isReady())c[k[l]]=
!0;else return!1}h.a.PrepareDefinesForMisc(a,f,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);c._needNormals=h.a.PrepareDefinesForLights(f,a,c,!1,this._maxSimultaneousLights,this._disableLighting);h.a.PrepareDefinesForFrameBoundValues(f,e,c,d?!0:!1);h.a.PrepareDefinesForAttributes(a,c,!0,!0);if(c.isDirty){c.markAsProcessed();f.resetCachedMaterial();d=new y.a;c.FOG&&d.addFallback(1,"FOG");h.a.HandleFallbacksForShadows(c,d,this.maxSimultaneousLights);0<c.NUM_BONE_INFLUENCERS&&
d.addCPUSkinningFallback(0,a);c.IMAGEPROCESSINGPOSTPROCESS=f.imageProcessingConfiguration.applyByPostProcess;g=[n.b.PositionKind];c.NORMAL&&g.push(n.b.NormalKind);c.VERTEXCOLOR&&g.push(n.b.ColorKind);h.a.PrepareAttributesForBones(g,a,c,d);h.a.PrepareAttributesForInstances(g,c);a=c.toString();k="world view viewProjection vEyePosition vLightsType vDiffuseColor vSpecularColor vFogInfos vFogColor pointSize mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 tileSize".split(" ");
l="diffuseSamplerX diffuseSamplerY diffuseSamplerZ normalSamplerX normalSamplerY normalSamplerZ".split(" ");var m=[];h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:this.maxSimultaneousLights});b.setEffect(f.getEngine().createEffect("triplanar",{attributes:g,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:d,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this.maxSimultaneousLights}},
e),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=f.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,d){var c=this.getScene(),f=d._materialDefines;f&&(d=d.effect)&&(this._activeEffect=d,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._activeEffect.setFloat("tileSize",this.tileSize),c.getCachedMaterial()!==this&&(this.diffuseTextureX&&this._activeEffect.setTexture("diffuseSamplerX",
this.diffuseTextureX),this.diffuseTextureY&&this._activeEffect.setTexture("diffuseSamplerY",this.diffuseTextureY),this.diffuseTextureZ&&this._activeEffect.setTexture("diffuseSamplerZ",this.diffuseTextureZ),this.normalTextureX&&this._activeEffect.setTexture("normalSamplerX",this.normalTextureX),this.normalTextureY&&this._activeEffect.setTexture("normalSamplerY",this.normalTextureY),this.normalTextureZ&&this._activeEffect.setTexture("normalSamplerZ",this.normalTextureZ),h.a.BindClipPlane(this._activeEffect,
c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(d,c)),this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*b.visibility),f.SPECULARTERM&&this._activeEffect.setColor4("vSpecularColor",this.specularColor,this.specularPower),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,f,this.maxSimultaneousLights),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),
h.a.BindFogParameters(c,b,this._activeEffect),this._afterBind(b,this._activeEffect))};b.prototype.getAnimatables=function(){var a=[];this.mixTexture&&this.mixTexture.animations&&0<this.mixTexture.animations.length&&a.push(this.mixTexture);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._diffuseTextureX&&a.push(this._diffuseTextureX);this._diffuseTextureY&&a.push(this._diffuseTextureY);this._diffuseTextureZ&&a.push(this._diffuseTextureZ);this._normalTextureX&&
a.push(this._normalTextureX);this._normalTextureY&&a.push(this._normalTextureY);this._normalTextureZ&&a.push(this._normalTextureZ);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)||this._diffuseTextureX===a||this._diffuseTextureY===a||this._diffuseTextureZ===a||this._normalTextureX===a||this._normalTextureY===a||this._normalTextureZ===a?!0:!1};b.prototype.dispose=function(a){this.mixTexture&&this.mixTexture.dispose();k.prototype.dispose.call(this,a)};b.prototype.clone=
function(a){var f=this;return d.a.Clone(function(){return new b(a,f.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.TriPlanarMaterial";return a};b.prototype.getClassName=function(){return"TriPlanarMaterial"};b.Parse=function(a,f,e){return d.a.Parse(function(){return new b(a.name,f)},a,f,e)};Object(e.b)([Object(d.m)()],b.prototype,"mixTexture",void 0);Object(e.b)([Object(d.m)("diffuseTextureX")],b.prototype,"_diffuseTextureX",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],
b.prototype,"diffuseTextureX",void 0);Object(e.b)([Object(d.m)("diffuseTexturY")],b.prototype,"_diffuseTextureY",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTextureY",void 0);Object(e.b)([Object(d.m)("diffuseTextureZ")],b.prototype,"_diffuseTextureZ",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"diffuseTextureZ",void 0);Object(e.b)([Object(d.m)("normalTextureX")],b.prototype,"_normalTextureX",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],
b.prototype,"normalTextureX",void 0);Object(e.b)([Object(d.m)("normalTextureY")],b.prototype,"_normalTextureY",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"normalTextureY",void 0);Object(e.b)([Object(d.m)("normalTextureZ")],b.prototype,"_normalTextureZ",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"normalTextureZ",void 0);Object(e.b)([Object(d.c)()],b.prototype,"tileSize",void 0);Object(e.b)([Object(d.e)()],b.prototype,"diffuseColor",
void 0);Object(e.b)([Object(d.e)()],b.prototype,"specularColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"specularPower",void 0);Object(e.b)([Object(d.c)("disableLighting")],b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",
void 0);return b}(w.a);t.a.RegisteredTypes["BABYLON.TriPlanarMaterial"]=p;var G=l("j2cH"),A=l("BOQG"),Z=l("Bfey"),H=l("srWW"),D=l("stmW"),aa=l("wAMR");l("z1+4");l("hDr5");l("1pca");l("Blin");m.a.ShadersStore.waterPixelShader="#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\nprecision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n#include<imageProcessingDeclaration>\n#include<imageProcessingFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef BUMP\nvarying vec2 vNormalUV;\nvarying vec2 vNormalUV2;\nuniform sampler2D normalSampler;\nuniform vec2 vNormalInfos;\n#endif\nuniform sampler2D refractionSampler;\nuniform sampler2D reflectionSampler;\n\nconst float LOG2=1.442695;\nuniform vec3 cameraPosition;\nuniform vec4 waterColor;\nuniform float colorBlendFactor;\nuniform vec4 waterColor2;\nuniform float colorBlendFactor2;\nuniform float bumpHeight;\nuniform float time;\n\nvarying vec3 vRefractionMapTexCoord;\nvarying vec3 vReflectionMapTexCoord;\nvarying vec3 vPosition;\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef BUMP\n#ifdef BUMPSUPERIMPOSE\nbaseColor=0.6*texture2D(normalSampler,vNormalUV)+0.4*texture2D(normalSampler,vec2(vNormalUV2.x,vNormalUV2.y));\n#else\nbaseColor=texture2D(normalSampler,vNormalUV);\n#endif\nvec3 bumpColor=baseColor.rgb;\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\nbaseColor.rgb*=vNormalInfos.y;\n#else\nvec3 bumpColor=vec3(1.0);\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec2 perturbation=bumpHeight*(baseColor.rg-0.5);\n#ifdef BUMPAFFECTSREFLECTION\nvec3 normalW=normalize(vNormalW+vec3(perturbation.x*8.0,0.0,perturbation.y*8.0));\nif (normalW.y<0.0) {\nnormalW.y=-normalW.y;\n}\n#else\nvec3 normalW=normalize(vNormalW);\n#endif\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\nvec2 perturbation=bumpHeight*(vec2(1.0,1.0)-0.5);\n#endif\n#ifdef FRESNELSEPARATE\n#ifdef REFLECTION\n\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation*0.5,0.0,1.0);\nvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\n#ifdef IS_REFRACTION_LINEAR\nrefractiveColor.rgb=toGammaSpace(refractiveColor.rgb);\n#endif\nvec2 projectedReflectionTexCoords=clamp(vec2(\nvReflectionMapTexCoord.x/vReflectionMapTexCoord.z+perturbation.x*0.3,\nvReflectionMapTexCoord.y/vReflectionMapTexCoord.z+perturbation.y\n),0.0,1.0);\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\n#ifdef IS_REFLECTION_LINEAR\nreflectiveColor.rgb=toGammaSpace(reflectiveColor.rgb);\n#endif\nvec3 upVector=vec3(0.0,1.0,0.0);\nfloat fresnelTerm=clamp(abs(pow(dot(viewDirectionW,upVector),3.0)),0.05,0.65);\nfloat IfresnelTerm=1.0-fresnelTerm;\nrefractiveColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*refractiveColor;\nreflectiveColor=IfresnelTerm*colorBlendFactor2*waterColor+(1.0-colorBlendFactor2*IfresnelTerm)*reflectiveColor;\nvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*IfresnelTerm;\nbaseColor=combinedColor;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\n#else\n#ifdef REFLECTION\n\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation,0.0,1.0);\nvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\n#ifdef IS_REFRACTION_LINEAR\nrefractiveColor.rgb=toGammaSpace(refractiveColor.rgb);\n#endif\nvec2 projectedReflectionTexCoords=clamp(vReflectionMapTexCoord.xy/vReflectionMapTexCoord.z+perturbation,0.0,1.0);\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\n#ifdef IS_REFLECTION_LINEAR\nreflectiveColor.rgb=toGammaSpace(reflectiveColor.rgb);\n#endif\nvec3 upVector=vec3(0.0,1.0,0.0);\nfloat fresnelTerm=max(dot(viewDirectionW,upVector),0.0);\nvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*(1.0-fresnelTerm);\nbaseColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*combinedColor;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\n#endif\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<logDepthFragment>\n#include<fogFragment>\n\n\n#ifdef IMAGEPROCESSINGPOSTPROCESS\ncolor.rgb=toLinearSpace(color.rgb);\n#elif defined(IMAGEPROCESSING)\ncolor.rgb=toLinearSpace(color.rgb);\ncolor=applyImageProcessing(color);\n#endif\ngl_FragColor=color;\n}\n";
l("49vX");m.a.ShadersStore.waterVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef BUMP\nvarying vec2 vNormalUV;\n#ifdef BUMPSUPERIMPOSE\nvarying vec2 vNormalUV2;\n#endif\nuniform mat4 normalMatrix;\nuniform vec2 vNormalInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<logDepthDeclaration>\n\nuniform mat4 worldReflectionViewProjection;\nuniform vec2 windDirection;\nuniform float waveLength;\nuniform float time;\nuniform float windForce;\nuniform float waveHeight;\nuniform float waveSpeed;\nuniform float waveCount;\n\nvarying vec3 vPosition;\nvarying vec3 vRefractionMapTexCoord;\nvarying vec3 vReflectionMapTexCoord;\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef BUMP\nif (vNormalInfos.x == 0.)\n{\nvNormalUV=vec2(normalMatrix*vec4((uv*1.0)/waveLength+time*windForce*windDirection,1.0,0.0));\n#ifdef BUMPSUPERIMPOSE\nvNormalUV2=vec2(normalMatrix*vec4((uv*0.721)/waveLength+time*1.2*windForce*windDirection,1.0,0.0));\n#endif\n}\nelse\n{\nvNormalUV=vec2(normalMatrix*vec4((uv2*1.0)/waveLength+time*windForce*windDirection ,1.0,0.0));\n#ifdef BUMPSUPERIMPOSE\nvNormalUV2=vec2(normalMatrix*vec4((uv2*0.721)/waveLength+time*1.2*windForce*windDirection ,1.0,0.0));\n#endif\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\nfloat finalWaveCount=1.0/(waveCount*0.5);\nvec3 p=position;\nfloat newY=(sin(((p.x/finalWaveCount)+time*waveSpeed))*waveHeight*windDirection.x*5.0)\n+(cos(((p.z/finalWaveCount)+time*waveSpeed))*waveHeight*windDirection.y*5.0);\np.y+=abs(newY);\ngl_Position=viewProjection*finalWorld*vec4(p,1.0);\n#ifdef REFLECTION\nworldPos=viewProjection*finalWorld*vec4(p,1.0);\n\nvPosition=position;\nvRefractionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\nvRefractionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\nvRefractionMapTexCoord.z=worldPos.w;\nworldPos=worldReflectionViewProjection*vec4(position,1.0);\nvReflectionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\nvReflectionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\nvReflectionMapTexCoord.z=worldPos.w;\n#endif\n#include<logDepthVertex>\n}\n";
var ba=function(d){function b(){var a=d.call(this)||this;a.BUMP=!1;a.REFLECTION=!1;a.CLIPPLANE=!1;a.CLIPPLANE2=!1;a.CLIPPLANE3=!1;a.CLIPPLANE4=!1;a.CLIPPLANE5=!1;a.CLIPPLANE6=!1;a.ALPHATEST=!1;a.DEPTHPREPASS=!1;a.POINTSIZE=!1;a.FOG=!1;a.NORMAL=!1;a.UV1=!1;a.UV2=!1;a.VERTEXCOLOR=!1;a.VERTEXALPHA=!1;a.NUM_BONE_INFLUENCERS=0;a.BonesPerMesh=0;a.INSTANCES=!1;a.SPECULARTERM=!1;a.LOGARITHMICDEPTH=!1;a.FRESNELSEPARATE=!1;a.BUMPSUPERIMPOSE=!1;a.BUMPAFFECTSREFLECTION=!1;a.IMAGEPROCESSING=!1;a.VIGNETTE=!1;a.VIGNETTEBLENDMODEMULTIPLY=
!1;a.VIGNETTEBLENDMODEOPAQUE=!1;a.TONEMAPPING=!1;a.TONEMAPPING_ACES=!1;a.CONTRAST=!1;a.EXPOSURE=!1;a.COLORCURVES=!1;a.COLORGRADING=!1;a.COLORGRADING3D=!1;a.SAMPLER3DGREENDEPTH=!1;a.SAMPLER3DBGRMAP=!1;a.IMAGEPROCESSINGPOSTPROCESS=!1;a.rebuild();return a}Object(e.c)(b,d);return b}(v.a);l=function(k){function b(a,b,d){void 0===d&&(d=new u.d(512,512));var c=k.call(this,a,b)||this;c.renderTargetSize=d;c.diffuseColor=new r.a(1,1,1);c.specularColor=new r.a(0,0,0);c.specularPower=64;c._disableLighting=!1;
c._maxSimultaneousLights=4;c.windForce=6;c.windDirection=new u.d(0,1);c.waveHeight=.4;c.bumpHeight=.4;c._bumpSuperimpose=!1;c._fresnelSeparate=!1;c._bumpAffectsReflection=!1;c.waterColor=new r.a(.1,.1,.6);c.colorBlendFactor=.2;c.waterColor2=new r.a(.1,.1,.6);c.colorBlendFactor2=.2;c.waveLength=.1;c.waveSpeed=1;c.waveCount=20;c.disableClipPlane=!1;c._renderTargets=new Z.a(16);c._mesh=null;c._reflectionTransform=u.a.Zero();c._lastTime=0;c._lastDeltaTime=0;c._createRenderTargets(b,d);c.getRenderTargetTextures=
function(){c._renderTargets.reset();c._renderTargets.push(c._reflectionRTT);c._renderTargets.push(c._refractionRTT);return c._renderTargets};c._imageProcessingConfiguration=c.getScene().imageProcessingConfiguration;c._imageProcessingConfiguration&&(c._imageProcessingObserver=c._imageProcessingConfiguration.onUpdateParameters.add(function(){c._markAllSubMeshesAsImageProcessingDirty()}));return c}Object(e.c)(b,k);Object.defineProperty(b.prototype,"hasRenderTargetTextures",{get:function(){return!0},
enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"useLogarithmicDepth",{get:function(){return this._useLogarithmicDepth},set:function(a){this._useLogarithmicDepth=a&&this.getScene().getEngine().getCaps().fragmentDepthSupported;this._markAllSubMeshesAsMiscDirty()},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"refractionTexture",{get:function(){return this._refractionRTT},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"reflectionTexture",{get:function(){return this._reflectionRTT},
enumerable:!1,configurable:!0});b.prototype.addToRenderList=function(a){this._refractionRTT&&this._refractionRTT.renderList&&this._refractionRTT.renderList.push(a);this._reflectionRTT&&this._reflectionRTT.renderList&&this._reflectionRTT.renderList.push(a)};b.prototype.enableRenderTargets=function(a){a=a?1:0;this._refractionRTT&&(this._refractionRTT.refreshRate=a);this._reflectionRTT&&(this._reflectionRTT.refreshRate=a)};b.prototype.getRenderList=function(){return this._refractionRTT?this._refractionRTT.renderList:
[]};Object.defineProperty(b.prototype,"renderTargetsEnabled",{get:function(){return!(this._refractionRTT&&0===this._refractionRTT.refreshRate)},enumerable:!1,configurable:!0});b.prototype.needAlphaBlending=function(){return 1>this.alpha};b.prototype.needAlphaTesting=function(){return!1};b.prototype.getAlphaTestTexture=function(){return null};b.prototype.isReadyForSubMesh=function(a,b,d){if(this.isFrozen&&b.effect&&b.effect._wasPreviouslyReady)return!0;b._materialDefines||(b._materialDefines=new ba);
var c=b._materialDefines,e=this.getScene();if(this._isReadyForSubMesh(b))return!0;var f=e.getEngine();if(c._areTexturesDirty&&(c._needUVs=!1,e.texturesEnabled)){if(this.bumpTexture&&q.a.BumpTextureEnabled)if(this.bumpTexture.isReady())c._needUVs=!0,c.BUMP=!0;else return!1;q.a.ReflectionTextureEnabled&&(c.REFLECTION=!0)}h.a.PrepareDefinesForFrameBoundValues(e,f,c,d?!0:!1);h.a.PrepareDefinesForMisc(a,e,this._useLogarithmicDepth,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(a),c);c._areMiscDirty&&
(this._fresnelSeparate&&(c.FRESNELSEPARATE=!0),this._bumpSuperimpose&&(c.BUMPSUPERIMPOSE=!0),this._bumpAffectsReflection&&(c.BUMPAFFECTSREFLECTION=!0));c._needNormals=h.a.PrepareDefinesForLights(e,a,c,!0,this._maxSimultaneousLights,this._disableLighting);if(c._areImageProcessingDirty&&this._imageProcessingConfiguration){if(!this._imageProcessingConfiguration.isReady())return!1;this._imageProcessingConfiguration.prepareDefines(c);c.IS_REFLECTION_LINEAR=null!=this.reflectionTexture&&!this.reflectionTexture.gammaSpace;
c.IS_REFRACTION_LINEAR=null!=this.refractionTexture&&!this.refractionTexture.gammaSpace}h.a.PrepareDefinesForAttributes(a,c,!0,!0);this._mesh=a;if(this._waitingRenderList){for(d=0;d<this._waitingRenderList.length;d++)this.addToRenderList(e.getNodeByID(this._waitingRenderList[d]));this._waitingRenderList=null}if(c.isDirty){c.markAsProcessed();e.resetCachedMaterial();d=new y.a;c.FOG&&d.addFallback(1,"FOG");c.LOGARITHMICDEPTH&&d.addFallback(0,"LOGARITHMICDEPTH");h.a.HandleFallbacksForShadows(c,d,this.maxSimultaneousLights);
0<c.NUM_BONE_INFLUENCERS&&d.addCPUSkinningFallback(0,a);var g=[n.b.PositionKind];c.NORMAL&&g.push(n.b.NormalKind);c.UV1&&g.push(n.b.UVKind);c.UV2&&g.push(n.b.UV2Kind);c.VERTEXCOLOR&&g.push(n.b.ColorKind);h.a.PrepareAttributesForBones(g,a,c,d);h.a.PrepareAttributesForInstances(g,c);a=c.toString();var k="world view viewProjection vEyePosition vLightsType vDiffuseColor vSpecularColor vFogInfos vFogColor pointSize vNormalInfos mBones vClipPlane vClipPlane2 vClipPlane3 vClipPlane4 vClipPlane5 vClipPlane6 normalMatrix logarithmicDepthConstant worldReflectionViewProjection windDirection waveLength time windForce cameraPosition bumpHeight waveHeight waterColor waterColor2 colorBlendFactor colorBlendFactor2 waveSpeed waveCount".split(" "),
l=["normalSampler","refractionSampler","reflectionSampler"],m=[];D.a&&(D.a.PrepareUniforms(k,c),D.a.PrepareSamplers(l,c));h.a.PrepareUniformsAndSamplersList({uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:c,maxSimultaneousLights:this.maxSimultaneousLights});b.setEffect(e.getEngine().createEffect("water",{attributes:g,uniformsNames:k,uniformBuffersNames:m,samplers:l,defines:a,fallbacks:d,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this._maxSimultaneousLights}},
f),c)}if(!b.effect||!b.effect.isReady())return!1;c._renderId=e.getRenderId();return b.effect._wasPreviouslyReady=!0};b.prototype.bindForSubMesh=function(a,b,d){var c=this.getScene(),e=d._materialDefines;e&&(d=d.effect)&&this._mesh&&(this._activeEffect=d,this.bindOnlyWorldMatrix(a),this._activeEffect.setMatrix("viewProjection",c.getTransformMatrix()),h.a.BindBonesParameters(b,this._activeEffect),this._mustRebind(c,d)&&(this.bumpTexture&&q.a.BumpTextureEnabled&&(this._activeEffect.setTexture("normalSampler",
this.bumpTexture),this._activeEffect.setFloat2("vNormalInfos",this.bumpTexture.coordinatesIndex,this.bumpTexture.level),this._activeEffect.setMatrix("normalMatrix",this.bumpTexture.getTextureMatrix())),h.a.BindClipPlane(this._activeEffect,c),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),h.a.BindEyePosition(d,c)),this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*b.visibility),e.SPECULARTERM&&this._activeEffect.setColor4("vSpecularColor",this.specularColor,
this.specularPower),c.lightsEnabled&&!this.disableLighting&&h.a.BindLights(c,b,this._activeEffect,e,this.maxSimultaneousLights),c.fogEnabled&&b.applyFog&&c.fogMode!==x.a.FOGMODE_NONE&&this._activeEffect.setMatrix("view",c.getViewMatrix()),h.a.BindFogParameters(c,b,this._activeEffect),h.a.BindLogDepth(e,this._activeEffect,c),q.a.ReflectionTextureEnabled&&(this._activeEffect.setTexture("refractionSampler",this._refractionRTT),this._activeEffect.setTexture("reflectionSampler",this._reflectionRTT)),a=
this._mesh.getWorldMatrix().multiply(this._reflectionTransform).multiply(c.getProjectionMatrix()),c=c.getEngine().getDeltaTime(),c!==this._lastDeltaTime&&(this._lastDeltaTime=c,this._lastTime+=this._lastDeltaTime),this._activeEffect.setMatrix("worldReflectionViewProjection",a),this._activeEffect.setVector2("windDirection",this.windDirection),this._activeEffect.setFloat("waveLength",this.waveLength),this._activeEffect.setFloat("time",this._lastTime/1E5),this._activeEffect.setFloat("windForce",this.windForce),
this._activeEffect.setFloat("waveHeight",this.waveHeight),this._activeEffect.setFloat("bumpHeight",this.bumpHeight),this._activeEffect.setColor4("waterColor",this.waterColor,1),this._activeEffect.setFloat("colorBlendFactor",this.colorBlendFactor),this._activeEffect.setColor4("waterColor2",this.waterColor2,1),this._activeEffect.setFloat("colorBlendFactor2",this.colorBlendFactor2),this._activeEffect.setFloat("waveSpeed",this.waveSpeed),this._activeEffect.setFloat("waveCount",this.waveCount),this._imageProcessingConfiguration&&
!this._imageProcessingConfiguration.applyByPostProcess&&this._imageProcessingConfiguration.bind(this._activeEffect),this._afterBind(b,this._activeEffect))};b.prototype._createRenderTargets=function(a,b){var d=this;this._refractionRTT=new H.a(name+"_refraction",{width:b.x,height:b.y},a,!1,!0);this._refractionRTT.wrapU=A.a.TEXTURE_MIRROR_ADDRESSMODE;this._refractionRTT.wrapV=A.a.TEXTURE_MIRROR_ADDRESSMODE;this._refractionRTT.ignoreCameraViewport=!0;this._reflectionRTT=new H.a(name+"_reflection",{width:b.x,
height:b.y},a,!1,!0);this._reflectionRTT.wrapU=A.a.TEXTURE_MIRROR_ADDRESSMODE;this._reflectionRTT.wrapV=A.a.TEXTURE_MIRROR_ADDRESSMODE;this._reflectionRTT.ignoreCameraViewport=!0;var c,e=null,f,h=u.a.Zero();this._refractionRTT.onBeforeRender=function(){d._mesh&&(c=d._mesh.isVisible,d._mesh.isVisible=!1);d.disableClipPlane||(e=a.clipPlane,a.clipPlane=G.a.FromPositionAndNormal(new u.e(0,(d._mesh?d._mesh.position.y:0)+.05,0),new u.e(0,1,0)))};this._refractionRTT.onAfterRender=function(){d._mesh&&(d._mesh.isVisible=
c);d.disableClipPlane||(a.clipPlane=e)};this._reflectionRTT.onBeforeRender=function(){d._mesh&&(c=d._mesh.isVisible,d._mesh.isVisible=!1);d.disableClipPlane||(e=a.clipPlane,a.clipPlane=G.a.FromPositionAndNormal(new u.e(0,(d._mesh?d._mesh.position.y:0)-.05,0),new u.e(0,-1,0)),u.a.ReflectionToRef(a.clipPlane,h));f=a.getViewMatrix();h.multiplyToRef(f,d._reflectionTransform);a.setTransformMatrix(d._reflectionTransform,a.getProjectionMatrix());a.getEngine().cullBackFaces=!1;a._mirroredCameraPosition=u.e.TransformCoordinates(a.activeCamera.position,
h)};this._reflectionRTT.onAfterRender=function(){d._mesh&&(d._mesh.isVisible=c);a.clipPlane=e;a.setTransformMatrix(f,a.getProjectionMatrix());a.getEngine().cullBackFaces=!0;a._mirroredCameraPosition=null}};b.prototype.getAnimatables=function(){var a=[];this.bumpTexture&&this.bumpTexture.animations&&0<this.bumpTexture.animations.length&&a.push(this.bumpTexture);this._reflectionRTT&&this._reflectionRTT.animations&&0<this._reflectionRTT.animations.length&&a.push(this._reflectionRTT);this._refractionRTT&&
this._refractionRTT.animations&&0<this._refractionRTT.animations.length&&a.push(this._refractionRTT);return a};b.prototype.getActiveTextures=function(){var a=k.prototype.getActiveTextures.call(this);this._bumpTexture&&a.push(this._bumpTexture);return a};b.prototype.hasTexture=function(a){return k.prototype.hasTexture.call(this,a)||this._bumpTexture===a?!0:!1};b.prototype.dispose=function(a){this.bumpTexture&&this.bumpTexture.dispose();var b=this.getScene().customRenderTargets.indexOf(this._refractionRTT);
-1!=b&&this.getScene().customRenderTargets.splice(b,1);b=this.getScene().customRenderTargets.indexOf(this._reflectionRTT);-1!=b&&this.getScene().customRenderTargets.splice(b,1);this._reflectionRTT&&this._reflectionRTT.dispose();this._refractionRTT&&this._refractionRTT.dispose();this._imageProcessingConfiguration&&this._imageProcessingObserver&&this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);k.prototype.dispose.call(this,a)};b.prototype.clone=function(a){var e=
this;return d.a.Clone(function(){return new b(a,e.getScene())},this)};b.prototype.serialize=function(){var a=d.a.Serialize(this);a.customType="BABYLON.WaterMaterial";a.renderList=[];if(this._refractionRTT&&this._refractionRTT.renderList)for(var b=0;b<this._refractionRTT.renderList.length;b++)a.renderList.push(this._refractionRTT.renderList[b].id);return a};b.prototype.getClassName=function(){return"WaterMaterial"};b.Parse=function(a,e,g){g=d.a.Parse(function(){return new b(a.name,e)},a,e,g);g._waitingRenderList=
a.renderList;return g};b.CreateDefaultMesh=function(a,b){return aa.a.CreateGround(a,512,512,32,b,!1)};Object(e.b)([Object(d.m)("bumpTexture")],b.prototype,"_bumpTexture",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsTexturesDirty")],b.prototype,"bumpTexture",void 0);Object(e.b)([Object(d.e)()],b.prototype,"diffuseColor",void 0);Object(e.b)([Object(d.e)()],b.prototype,"specularColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"specularPower",void 0);Object(e.b)([Object(d.c)("disableLighting")],
b.prototype,"_disableLighting",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"disableLighting",void 0);Object(e.b)([Object(d.c)("maxSimultaneousLights")],b.prototype,"_maxSimultaneousLights",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsLightsDirty")],b.prototype,"maxSimultaneousLights",void 0);Object(e.b)([Object(d.c)()],b.prototype,"windForce",void 0);Object(e.b)([Object(d.n)()],b.prototype,"windDirection",void 0);Object(e.b)([Object(d.c)()],b.prototype,
"waveHeight",void 0);Object(e.b)([Object(d.c)()],b.prototype,"bumpHeight",void 0);Object(e.b)([Object(d.c)("bumpSuperimpose")],b.prototype,"_bumpSuperimpose",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsMiscDirty")],b.prototype,"bumpSuperimpose",void 0);Object(e.b)([Object(d.c)("fresnelSeparate")],b.prototype,"_fresnelSeparate",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsMiscDirty")],b.prototype,"fresnelSeparate",void 0);Object(e.b)([Object(d.c)("bumpAffectsReflection")],b.prototype,
"_bumpAffectsReflection",void 0);Object(e.b)([Object(d.b)("_markAllSubMeshesAsMiscDirty")],b.prototype,"bumpAffectsReflection",void 0);Object(e.b)([Object(d.e)()],b.prototype,"waterColor",void 0);Object(e.b)([Object(d.c)()],b.prototype,"colorBlendFactor",void 0);Object(e.b)([Object(d.e)()],b.prototype,"waterColor2",void 0);Object(e.b)([Object(d.c)()],b.prototype,"colorBlendFactor2",void 0);Object(e.b)([Object(d.c)()],b.prototype,"waveLength",void 0);Object(e.b)([Object(d.c)()],b.prototype,"waveSpeed",
void 0);Object(e.b)([Object(d.c)()],b.prototype,"waveCount",void 0);Object(e.b)([Object(d.c)()],b.prototype,"disableClipPlane",void 0);Object(e.b)([Object(d.c)()],b.prototype,"useLogarithmicDepth",null);return b}(w.a);t.a.RegisteredTypes["BABYLON.WaterMaterial"]=l}}]);
